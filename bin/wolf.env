#!/bin/bash

#####################################################################################
# MAKE SURE WE HAVE ALL SOURCE CODE WE NEED
#####################################################################################
_WOLF_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
_WOLF_DIR=`dirname "$_WOLF_DIR"`
_WOLF_BIN="${_WOLF_DIR}/bin"
if [[ ! -d ${_WOLF_BIN} || ! -f "${_WOLF_BIN}/utils" || ! -f "${_WOLF_BIN}/wolf.run" ]]; then
    printf "\033[1;7;31m [ERROR] - Invalid installation. Some binary files required to run wolf are either missing or unaccessible. Contact your cadadmin to fix this."
fi

#####################################################################################
# Source utils
#####################################################################################
source "${_WOLF_BIN}/utils"

#####################################################################################
# WOLF ENV HANDLER ALIAS
#####################################################################################
_wolf_env () {

    #####################################################################################
    # Make sure the local folder ".wolf" exists on user's path
    #####################################################################################
    _WOLF_ENV_DIR="${HOME}/.wolf/envs"
    if [[ ! -d "$_WOLF_ENV_DIR" && ! -L "$_WOLF_ENV_DIR" ]]; then 
        _wolf_info "First runtime detected. Creating wolf environments dir at ÷yellow÷\"$_WOLF_ENV_DIR\"÷÷"
        mkdir -p "$_WOLF_ENV_DIR"
    fi

    #####################################################################################
    # Get list of environments
    #####################################################################################
    _WOLF_ENVS_LIST=`find "$_WOLF_ENV_DIR" -maxdepth 1 -mindepth 1 -type d | sort -n`

    ###########################################
    # Init vars to default values
    #
    ##########################################
    _WOLF_ENV_ARGS_COMMAND=
    _WOLF_ENV_ARGS_NAME=
    _WOLF_ENV_ARGS_UPDATE_BUCKET=false
    _WOLF_ENV_ARGS_BUCKET_LIST=()

    SKIP=false
    WIZARD=false
    FORCE=false

    ###########################################
    # Parse flags
    ##########################################
    _WOLF_ENV_ARGS_POSITIONAL=()
    while [[ $# -gt 0 ]]; do
        _WOLF_ENV_ARGS_KEY="$1"
            case $_WOLF_ENV_ARGS_KEY in
                -h|--help)
                    # Help dialog
                    echo -e "Usage $(basename $BASH_SOURCE) [OPTIONS]... [EXTRA_ARGUMENTS]..."
                    echo "Wolf environment manager"
                    echo ""
                    echo "Main arguments taken $(basename $BASH_SOURCE):"
                    echo -e "\t-h, --help\t\tInvokes this dialog.\n"
                    echo -e "Options/commands passed to wolf env:"
                    echo -e "\tcreate \t\tCreates a new environment."
                    echo -e "\tlist \t\tList all available environments."
                    echo -e "\tauto-setup \t\tBuild placeholders and directory structure for a given project/design.\n"
                    echo -e "Arguments taken by \"wolf env create\":"
                    echo -e "\t-n, --name \t\tSpecifies the name of the environment.\n"
                    #echo -e "Arguments taken by wolf env list:\n"
                    echo -e "Arguments taken by \"wolf env auto-setup\":"
                    echo -e "\t-f, --force \t\tIn case the directories/placeholders exist, it overwrites them."
                    echo -e ""
                    return 0
                    ;;
                list)
                    _WOLF_ENV_ARGS_COMMAND="LIST"
                    shift # pass argument
                    ;;
                create)
                    _WOLF_ENV_ARGS_COMMAND="CREATE"
                    shift # pass argument
                    ;;
                remove)
                    _WOLF_ENV_ARGS_COMMAND="REMOVE"
                    shift
                    ;;
                activate)
                    _WOLF_ENV_ARGS_COMMAND="ACTIVATE"
                    _WOLF_ENV_ARGS_NAME="$2"
                    shift
                    shift
                    ;;
                deactivate)
                    _WOLF_ENV_ARGS_COMMAND="DEACTIVATE"
                    _WOLF_ENV_ARGS_NAME="$2"
                    shift
                    shift
                    ;;
                update)
                    _WOLF_ENV_ARGS_COMMAND="UPDATE"
                    _WOLF_ENV_ARGS_NAME="$2"
                    shift
                    shift
                    ;;
                reload)
                    _WOLF_ENV_ARGS_COMMAND="RELOAD"
                    _WOLF_ENV_ARGS_NAME="$2"
                    shift
                    shift
                    ;;
                status)
                    _WOLF_ENV_ARGS_COMMAND="STATUS"
                    shift
                    ;;
                set)
                    _WOLF_ENV_ARGS_COMMAND="SET"
                    _WOLF_ENV_ARGS_NAME="$2"
                    _WOLF_ENV_ARGS_VAR_NAME="$3"
                    shift
                    shift
                    shift
                    _WOLF_ENV_ARGS_VAR_VALUE="$@"
                    shift
                    ;;
                history)
                    _WOLF_ENV_ARGS_COMMAND="HISTORY"
                    _WOLF_ENV_ARGS_NAME="$2"
                    shift
                    shift
                    ;;
                 auto-setup)
                    _WOLF_ENV_ARGS_COMMAND="AUTO_SETUP"
                    shift
                    ;;
                --bucket)
                    _WOLF_ENV_ARGS_UPDATE_BUCKET=true
                    _WOLF_ENV_ARGS_BUCKET_LIST+=("$2")
                    shift 
                    shift
                    ;;
                -n|--name)
                    _WOLF_ENV_ARGS_NAME="$2"
                    shift
                    shift 
                    ;;
                -y|--yes)
                    SKIP=true
                    shift
                    ;;
                -w|--wizard)
                    WIZARD=true
                    shift 
                    ;;
                -f|--force)
                    FORCE=true
                    shift
                    ;;
            *)    # unknown option
            _WOLF_ENV_ARGS_POSITIONAL+=("$1") # save it in an array for later
            _WOLF_ENV_ARGS_POSITIONAL+=("$2")
            shift # past argument
            shift # past value
            ;;
        esac
    done
    set -- "${_WOLF_ENV_ARGS_POSITIONAL[@]}" # restore positional parameters

    #############################################
    # Invoke _WOLF_ENV_ARGS_COMMAND
    #
    ############################################
    case $_WOLF_ENV_ARGS_COMMAND in
        LIST)
            # Print header
            cprintf "$_WOLF_ENV_HEADER"
            cprintf "\n÷Blue÷÷bold÷ ÷white÷Available environments                                                                    ÷÷ \n"
            if [[ ! -z $_WOLF_ENVS_LIST ]]; then
                _WOLF_ENVS_LIST=($(echo "${_WOLF_ENVS_LIST[@]}" | xargs))
                _WOLF_ENV_ARGS_NUM_ENVS="${#_WOLF_ENVS_LIST[@]}"
                for ((i=0; i<_WOLF_ENV_ARGS_NUM_ENVS; i++)); do
                    printf " "
                    _wolf_entry "÷÷÷yellow÷`basename ${_WOLF_ENVS_LIST[$i]}`÷÷       \t${_WOLF_ENVS_LIST[$i]}"
                done
                unset i
                printf "\n"
            else 
                # Print empty warning message
                cprintf "÷red÷No wolf environment ÷÷detected in ÷yellow÷\"$_WOLF_ENV_DIR\"÷÷.\n\n"
            fi
            ;;
        CREATE|REMOVE)
            # Make sure name is valid
            if [[ -z $_WOLF_ENV_ARGS_NAME ]]; then
                _wolf_error "Create/Remove command requires a name to be passed to wolf using the flag \"--name\",\n\te.g. ÷blue÷wolf env create ÷red÷--name <ENV_NAME>÷÷"
            else 
                # We are clear. Let's create the env.
                cprintf "$_WOLF_ENV_HEADER"

                # Create folder
                _WOLF_ENV_ARGS_ENV_FOLDER="$_WOLF_ENV_DIR/$_WOLF_ENV_ARGS_NAME"
  
                case $_WOLF_ENV_ARGS_COMMAND in
                    CREATE)
                        cprintf "\n÷Blue÷÷bold÷ ÷white÷Environment creation                                                                    ÷÷ \n"
                        if [[ -d "$_WOLF_ENV_DIR/$_WOLF_ENV_ARGS_NAME" || -L "$_WOLF_ENV_DIR/$_WOLF_ENV_ARGS_NAME" ]]; then 
                            _wolf_error "\nWolf environment ÷yellow÷\"$_WOLF_ENV_ARGS_NAME\"÷÷ already exists at ÷yellow÷\"$_WOLF_ENV_DIR/$_WOLF_ENV_ARGS_NAME\"÷÷. Skipping operation."
                        else

                            # Make sure we are NOT in an active environment, or things can get nasty.
                            if [[ -v WOLF_ENV_NAME ]]; then
                                _wolf_error "Active environment ÷yellow÷${WOLF_ENV_NAME}÷÷ detected. Please, run ÷yellow÷wolf deactivate÷÷ before deleting or creating an environment."
                                return 0
                            fi 

                            # Make sure env folder exists
                            mkdir -p "$_WOLF_ENV_ARGS_ENV_FOLDER"

                            # Init files
                            # ACTIVATE SCRIPT
                            _WOLF_ACT_ENV_FILE="$_WOLF_ENV_ARGS_ENV_FOLDER/activate"
                            touch "$_WOLF_ACT_ENV_FILE"
                            echo "#!/bin/bash" >> "$_WOLF_ACT_ENV_FILE" 
                            echo "export WOLF_ENV_NAME=\"$_WOLF_ENV_ARGS_NAME\"" >> "$_WOLF_ACT_ENV_FILE"
                            echo "export WOLF_ENV_DIR=\"$_WOLF_ENV_ARGS_ENV_FOLDER\"" >> "$_WOLF_ACT_ENV_FILE"
                            echo "" >> "$_WOLF_ACT_ENV_FILE"
                            # The rest is just the template
                            cat "$_WOLF_DIR/templates/activate.template" >> "$_WOLF_ACT_ENV_FILE"

                            # https://stackoverflow.com/questions/3223904/save-and-restore-shell-variables
                            #set > /tmp/pre
                            #foo=bar
                            #set > /tmp/post
                            #grep -v -F -f/tmp/pre /tmp/post > /tmp/vars

                            # DEACTIVATE ENV SCRIPT
                            _WOLF_DEACT_ENV_FILE="$_WOLF_ENV_ARGS_ENV_FOLDER/deactivate"
                            touch "$_WOLF_DEACT_ENV_FILE"
                            echo "#!/bin/bash" >> "$_WOLF_DEACT_ENV_FILE" 
                            echo "export PS1=\"\$WOLF_PS1_BACKUP\"" >> "$_WOLF_DEACT_ENV_FILE" 
                            echo "export WOLF_ENV_NAME=\"$_WOLF_ENV_ARGS_NAME\"" >> "$_WOLF_DEACT_ENV_FILE"
                            echo "export WOLF_ENV_DIR=\"$_WOLF_ENV_ARGS_ENV_FOLDER\"" >> "$_WOLF_DEACT_ENV_FILE"
                            echo "_WOLF_VARS_TO_IGNORE=\"${_WOLF_VARS_TO_IGNORE}\"" >> "$_WOLF_DEACT_ENV_FILE"
                            # The rest is just the template
                            cat "$_WOLF_DIR/templates/deactivate.template" >> "$_WOLF_DEACT_ENV_FILE"

                            # If wizard, start it 
                            if $WIZARD; then 
                                # Ask for DESIGN_NAME, PROJ_DIR, PROCESS, METAL_STACK and FLOW_SCRIPTS
                                continue
                                # After this, we can create the placeholders for the environment inside PROJ_DIR:
                                #   ${PROJ_DIR}
                                #       - inputs
                                #           - constraints
                                #               - ${DESIGN_NAME}.constraints.sdc
                                #           - calibre
                                #               - ${DESIGN_NAME}
                                #                   - ${DESIGN_NAME}.cmos22fdsoi.drc.cal
                                #                   - ${DESIGN_NAME}.drc.runset
                                #           - hdl
                                #               - ${DESIGN_NAME}.sv
                                #           - env
                                #               - ${DESIGN_NAME}
                                #                   - setup.${DESIGN_NAME}.template.yaml
                                #                   - ${DESIGN_NAME}.src.yaml
                                #                   - ${DESIGN_NAME}.env.csh
                                #                   - wolf_setup.${DESIGN_NAME}.sh
                                #           - floorplans
                                #           - scripts
                                #           - lib
                            fi 

                            # Print info
                            _wolf_ok "Wolf environment ÷yellow÷\"$_WOLF_ENV_ARGS_NAME\"÷÷ created at ÷yellow÷\"$_WOLF_ENV_DIR/$_WOLF_ENV_ARGS_NAME\"÷÷."
                        fi
                        ;;
                    
                    REMOVE)
                        if [[ ! -d "$_WOLF_ENV_DIR/$_WOLF_ENV_ARGS_NAME" && ! -L "$_WOLF_ENV_DIR/$_WOLF_ENV_ARGS_NAME" ]]; then 
                            _wolf_error "\nWolf environment ÷yellow÷\"$_WOLF_ENV_ARGS_NAME\"÷÷ does not exists at ÷yellow÷\"$_WOLF_ENV_DIR/$_WOLF_ENV_ARGS_NAME\"÷÷. Skipping operation."
                        else
                            # Make sure we are NOT in an active environment, or things can get nasty.
                            if [[ -v WOLF_ENV_NAME ]]; then
                                echo ""
                                _wolf_error "Active environment ÷yellow÷${WOLF_ENV_NAME}÷÷ detected. Please, run ÷yellow÷wolf deactivate÷÷ before deleting or creating an environment."
                                return 0
                            fi 

                            if $SKIP; then
                                REPLY="Y"
                            else
                                # Ask for confirmation
                                cprintf "\n÷Red÷÷bold÷ ÷white÷Are you sure you want to remove environment ÷yellow÷\"$_WOLF_ENV_DIR/$_WOLF_ENV_ARGS_NAME\"÷white÷ permanently? [y|N]÷÷ "
                                read -p " " -n 1 -r
                            fi 
                            echo ""
                            if [[ $REPLY =~ ^[Yy]$ ]]; then
                                backup_dir=`echo $_WOLF_ENV_DIR`
                                backup_name=`echo $_WOLF_ENV_ARGS_NAME`
                                #source "$_WOLF_ENV_DIR/$_WOLF_ENV_ARGS_NAME/deactivate"
                                rm -rf "$backup_dir/$backup_name"
                                _wolf_ok "Wolf environment ÷yellow÷\"$backup_name\"÷÷ successfully removed from ÷yellow÷\"$backup_dir/$backup_name\"÷÷."
                            else 
                                _wolf_info "Wolf environment ÷yellow÷\"$_WOLF_ENV_ARGS_NAME\"÷÷ left untouched."
                            fi
                        fi
                        ;;
                esac
            fi
            ;;
        ACTIVATE)
            if [[ -z $_WOLF_ENV_ARGS_NAME ]]; then
                _wolf_error "No env name provided to activate function. Skipping."
            else
                source "$_WOLF_ENV_DIR/$_WOLF_ENV_ARGS_NAME/activate"
            fi
            ;;
        UPDATE)
            if $_WOLF_ENV_ARGS_UPDATE_BUCKET; then 
                if [ ${#_WOLF_ENV_ARGS_BUCKET_LIST[@]} -eq 0 ]; then
                    _WOLF_ENV_ARGS_BUCKET_LIST=$(dialog --stdout --title "Please choose a file" --fselect $HOME/ $(expr $LINES - 15) $(expr $COLUMNS - 10))
                fi
                touch "$_WOLF_ENV_DIR/$_WOLF_ENV_ARGS_NAME/bucket.p"
                if [[ -f "$_WOLF_ENV_ARGS_BUCKET_LIST" || -L "$_WOLF_ENV_ARGS_BUCKET_LIST" ]]; then
                    if [[ ! -f "$_WOLF_ENV_DIR/$_WOLF_ENV_ARGS_NAME/bucket.p" && ! -L "$_WOLF_ENV_DIR/$_WOLF_ENV_ARGS_NAME/bucket.p" ]]; then  
                        echo "#!/bin/bash" >> "$_WOLF_ENV_DIR/$_WOLF_ENV_ARGS_NAME/bucket.p"
                    fi
                    for f in "${_WOLF_ENV_ARGS_BUCKET_LIST[@]}"; do
                        if grep -q "source \"$f\"" "$_WOLF_ENV_DIR/$_WOLF_ENV_ARGS_NAME/bucket.p"; then
                            # code if found
                            echo "$(grep -v "source \"$f\"" $_WOLF_ENV_DIR/$_WOLF_ENV_ARGS_NAME/bucket.p)" >"$_WOLF_ENV_DIR/$_WOLF_ENV_ARGS_NAME/bucket.p"
                        fi
                        echo "source \"$f\"" >> "$_WOLF_ENV_DIR/$_WOLF_ENV_ARGS_NAME/bucket.p"
                    done
                fi
                source "$_WOLF_ENV_DIR/$_WOLF_ENV_ARGS_NAME/bucket.p"
                _wolf_ok "Bucket source file \"$_WOLF_ENV_DIR/$_WOLF_ENV_ARGS_NAME/bucket.p\" successfully updated"

            elif [[ -z $_WOLF_ENV_ARGS_NAME ]]; then
                _wolf_error "No env name provided to update function. Skipping."
            fi
            ;;
        DEACTIVATE)
            if [[ -z $_WOLF_ENV_ARGS_NAME ]]; then
                _wolf_error "No env name provided to deactivate function. Skipping."
            else
                source "$_WOLF_ENV_DIR/$_WOLF_ENV_ARGS_NAME/deactivate"
            fi
            ;;
        RELOAD)
            if [[ -z $_WOLF_ENV_ARGS_NAME ]]; then
                _wolf_error "No env name provided to reload function. Skipping."
            else
                source "$_WOLF_ENV_DIR/$_WOLF_ENV_ARGS_NAME/deactivate"
                source "$_WOLF_ENV_DIR/$_WOLF_ENV_ARGS_NAME/activate"
            fi
            ;;
        STATUS)
            if [[ ! -v WOLF_ENV_NAME ]]; then
                _wolf_error "No wolf environment name detected. Please, activate a wolf environment before running this function. Skipping."
            else
                if [[ -f "$_WOLF_ENV_DIR/$WOLF_ENV_NAME/vars.env" || -L "$_WOLF_ENV_DIR/$WOLF_ENV_NAME/vars.env" ]]; then 
                    cat "$_WOLF_ENV_DIR/$WOLF_ENV_NAME/vars.env"
                fi
            fi
            ;;
        SET)
            if [[ ! -v WOLF_ENV_NAME ]]; then 
                _wolf_error "No wolf environment name detected. Please, activate a wolf environment before running this function. Skipping."
            else 
                if [[ -f "$_WOLF_ENV_DIR/$WOLF_ENV_NAME/vars.env" || -L "$_WOLF_ENV_DIR/$WOLF_ENV_NAME/vars.env" ]]; then 
                    if grep -q "$_WOLF_ENV_ARGS_VAR_NAME" "$_WOLF_ENV_DIR/$WOLF_ENV_NAME/vars.env"; then
                        # code if found
                        echo "$(grep -v "$_WOLF_ENV_ARGS_VAR_NAME=" $_WOLF_ENV_DIR/$WOLF_ENV_NAME/vars.env)" >$_WOLF_ENV_DIR/$WOLF_ENV_NAME/vars.env
                    fi
                else
                    # code if not found
                    touch "$_WOLF_ENV_DIR/$WOLF_ENV_NAME/vars.env"
                fi
                _WOLF_ENV_ARGS_VAR_VALUE=`echo "${_WOLF_ENV_ARGS_VAR_VALUE}" | tr -d "\""`
                echo "${_WOLF_ENV_ARGS_VAR_NAME}=\"${_WOLF_ENV_ARGS_VAR_VALUE}\"" >> $_WOLF_ENV_DIR/$WOLF_ENV_NAME/vars.env
                export $(cat "$_WOLF_ENV_DIR/$WOLF_ENV_NAME/vars.env") &> /dev/null 
            fi
            ;;
        UNSET)
            if [[ ! -v WOLF_ENV_NAME ]]; then 
                _wolf_error "No wolf environment name detected. Please, activate a wolf environment before running this function. Skipping."
            else 
                if [[ -f "$_WOLF_ENV_DIR/$WOLF_ENV_NAME/vars.env" || -L "$_WOLF_ENV_DIR/$WOLF_ENV_NAME/vars.env" ]]; then 
                    if grep -q "$_WOLF_ENV_ARGS_VAR_NAME" "$_WOLF_ENV_DIR/$WOLF_ENV_NAME/vars.env"; then
                        # code if found
                        echo "$(grep -v "$_WOLF_ENV_ARGS_VAR_NAME=" $_WOLF_ENV_DIR/$WOLF_ENV_NAME/vars.env)" >$_WOLF_ENV_DIR/$WOLF_ENV_NAME/vars.env
                    fi
                fi
                unset "${_WOLF_ENV_ARGS_VAR_NAME}"
            fi
            ;;
        HISTORY)
            if [[ -z $_WOLF_ENV_ARGS_NAME ]]; then
                _wolf_error "No env name provided to activate function. Skipping."
            else
                #cprintf "\n÷Blue÷÷bold÷ ÷white÷History of runs                                                                    ÷÷ \n"
                printed=false
                while read -r key
                do 
                    # Access key
                    _WOLF_HISTORY_KEY_CMD1=$(cat $_WOLF_ENV_DIR/$_WOLF_ENV_ARGS_NAME/history | shyaml get-value ${key}.cmd1 2>/dev/null )
                    _WOLF_HISTORY_KEY_CMD2=$(cat $_WOLF_ENV_DIR/$_WOLF_ENV_ARGS_NAME/history | shyaml get-value ${key}.cmd2 2>/dev/null )
                    _WOLF_HISTORY_KEY_DATE=$(cat $_WOLF_ENV_DIR/$_WOLF_ENV_ARGS_NAME/history | shyaml get-value ${key}.date 2>/dev/null )
                    _WOLF_HISTORY_KEY_DIR=$(cat $_WOLF_ENV_DIR/$_WOLF_ENV_ARGS_NAME/history | shyaml get-value ${key}.dir 2>/dev/null )
                    printed=true
                    cprintf "÷Blue÷÷bold÷÷yellow÷${key}: ÷white÷${_WOLF_HISTORY_KEY_DATE}\033[K÷÷\n"
                    _wolf_entry "÷÷÷red÷${_WOLF_HISTORY_KEY_CMD1}÷÷"
                    _wolf_entry "÷÷÷yellow÷${_WOLF_HISTORY_KEY_DIR}÷÷"
                    _wolf_entry "÷÷÷white÷${_WOLF_HISTORY_KEY_CMD2}÷÷\n"

                done < <(cat $_WOLF_ENV_DIR/$_WOLF_ENV_ARGS_NAME/history | shyaml keys )
                
                if ! $printed; then
                    cprintf "÷red÷No history ÷÷detected for this environment ÷yellow÷\"$_WOLF_ENV_ARGS_NAME\"÷÷.\n\n"
                fi

            fi
            ;;
        AUTO_SETUP) 
            # Before getting into building anything, we need to make sure all the variables we need have been set. 
            # Let's start from the beginning. The most important thing is that we are inside an activated environment:
            if [[ -z $WOLF_ENV_NAME ]]; then
                _wolf_error ${_WOLF_ERROR_NO_ACTIVE_ENV}
                return 0
            fi
            # We have an active environment, now let's make sure we have all the variables we need for this process, which are:
            #   PROCESS, DESIGN_NAME, PROJ_DIR, METAL_STACK
            # Make sure PROCESS doesn't contain "
            PROCESS="${PROCESS//\"/}"
            if [[ -z $PROCESS ]]; then 
                _wolf_error "$(( _WOLF_ERROR_VARIABLE_NOT_SET PROCESS ))"
                return 0
            fi 
            # Make sure DESIGN_NAME doesn't contain "
            DESIGN_NAME="${DESIGN_NAME//\"/}"
            if [[ -z $DESIGN_NAME ]]; then 
                _wolf_error "$(( _WOLF_ERROR_VARIABLE_NOT_SET DESIGN_NAME ))"
                return 0
            fi 
            # Make sure PROJ_DIR doesn't contain "
            PROJ_DIR="${PROJ_DIR//\"/}"
            if [[ -z $PROJ_DIR ]]; then 
                _wolf_error "$(( _WOLF_ERROR_VARIABLE_NOT_SET PROJ_DIR ))"
                return 0
            fi 
            # Make sure METAL_STACK doesn't contain "
            METAL_STACK="${METAL_STACK//\"/}"
            if [[ -z $METAL_STACK ]]; then 
                _wolf_error "$(( _WOLF_ERROR_VARIABLE_NOT_SET METAL_STACK ))"
                return 0
            fi
            # Now that we know we have all the variables we need, let's make sure we have writing access to PROJ_DIR. 
            if [ -d "$PROJ_DIR" ]; then 
                # Directory exists, so let's check if it's writable 
                if [ -w "$PROJ_DIR" ]; then 
                    _wolf_info "Directory specified as PROJ_DIR ($PROJ_DIR) exists and it's writable."
                else 
                    _wolf_error "$(( _WOLF_ERROR_NON_WRITABLE_DIR $PROJ_DIR ))"
                    return 0
                fi
            else 
                # Directory doesn't exist, so let's make sure parent directory is writeable
                TMP=`dirname $PROJ_DIR`
                TMP="${TMP//\"/}"
                if [ -d "$TMP" ]; then 
                    if [ -w $TMP ]; then 
                        _wolf_info "Directory specified as PROJ_DIR ($PROJ_DIR) does not exist, but parent ($TMP) does and it's writable."
                    else 
                        _wolf_error "Directory specified as PROJ_DIR ($PROJ_DIR) does not exist. Parent directory ($TMP) does but it's not writable. Please specify a valid directory with writing permission and re-run the command again."
                        return 0
                    fi 
                else 
                    _wolf_error "$(( _WOLF_ERROR_NON_EXISTANT_DIR $TMP ))"
                    return 0
                fi
            fi

            # If we made it this far, that means we have all the right permissions to continue. Now we need to make sure we have
            #   the templates for the placeholders. That is, basically the setup.yaml template and the .csh template.
            #   This is the list of files/folders we need to create (*f indicates we must force its creation, if a directory)
            #   doesn't have the (*f) it means it might be there already. "-" are directories, "+" are files
            # - $PROJ_DIR 
            #    - inputs
            #       - calibre 
            #           - $DESIGN_NAME (*f)
            #               + $DESIGN_NAME.cmos22fdsoi.drc.cal (if gf22) // $DESIGN_NAME.tsmc65.drc.cal (if tsmc65)
            #               + $DESIGN_NAME.drc.runset
            #               + $DESIGN_NAME.lvs.runset
            #               + $DESIGN_NAME.lvs.cal
            #               + $DESIGN_NAME.verilog2spice.template.tcl
            #       - constraints
            #           + $DESIGN_NAME.constraints.sdc 
            #       - env 
            #           - $DESIGN_NAME (*f)
            #               + $DESIGN_NAME.env.csh
            #               + $DESIGN_NAME.src.yaml
            #               + setup.$DESIGN_NAME.template.yaml
            #               + wolf_setup.$DESIGN_NAME.sh
            #       - floorplans 
            #           - $DESIGN_NAME (*f)
            #       - hdl 
            #           - $DESIGN_NAME (*f)
            #       - lib 
            #           - gds
            #           - lef
            #           - spice
            #           - timing
            #           - verilog
            #       - scripts
            #           - $DESIGN_NAME (*f)
            #               + $DESIGN_NAME.floorplan.template.tcl
            #       - tb
            #           - $DESIGN_NAME (*f)
            #

            # Before creating all of this, let's print all these changes to the command line, so the user is aware of them.
            cprintf "$_WOLF_ENV_HEADER"
            cprintf "\n÷Blue÷÷bold÷ ÷white÷Environment placeholders creation                                                       ÷÷ \n"
            _wolf_entry "÷÷Checking the current project directory structure and looking for directories already present."
            printf "   "; _wolf_entry "÷yellow÷Dirs in yellow indicate objects that will be created.÷÷"
            printf "   "; _wolf_entry "÷white÷Directories in white indicate directories already present (no modification required).÷÷"
            printf "   "; _wolf_entry "÷red÷Files in red indicate files that already exist and will be overwritten if the user decides to do so.÷÷"
            printf "   "; _wolf_entry "÷green÷Files in green indicate files that will be generated (because they do not exist).÷÷"

            cprintf "\n÷Blue÷÷bold÷ ÷white÷The following modifications need to be applied to the system:                                                       ÷÷ \n"
            if [ -d "$PROJ_DIR" ]; then 
                cprintf "÷white÷\u2500 $PROJ_DIR÷÷\n"
            else 
                cprintf "\u2500 ÷yellow÷(+) $PROJ_DIR÷÷\n"
            fi 
            if [ -d "$PROJ_DIR/inputs" ]; then 
                cprintf "÷white÷   \u251c inputs÷÷\n"
            else 
                cprintf "   \u251c ÷yellow÷(+) inputs÷÷\n"
            fi

            ####### CALIBRE DIRECTORY
            if [ -d "$PROJ_DIR/inputs/calibre" ]; then 
                cprintf "÷white÷   \u2502 \u251c calibre÷÷\n"
            else 
                cprintf "   \u2502  \u251c ÷yellow÷(+) calibre÷÷\n"
            fi
            if [ -d "$PROJ_DIR/inputs/calibre/${DESIGN_NAME}" ]; then 
                cprintf "÷white÷   \u2502  \u2502  \u2514 ${DESIGN_NAME}÷÷\n"
            else 
                cprintf "   \u2502  \u2502  \u2514 ÷yellow÷(+) ${DESIGN_NAME}÷÷\n"
            fi
            case $PROCESS in
                GF22)
                    _WOLF_CALIBRE_DRC_RUNSET="$DESIGN_NAME.cmos22fdsoi.drc.cal"
                    ;;
                TSMC65)
                    _WOLF_CALIBRE_DRC_RUNSET="$DESIGN_NAME.tsmc65.drc.cal"
                    ;;
                *)
                    _WOLF_CALIBRE_DRC_RUNSET="$DESIGN_NAME.drc.cal"
                    ;;
            esac
            # CALIBRE FILES
            if [ -f "$PROJ_DIR/inputs/calibre/${DESIGN_NAME}/${_WOLF_CALIBRE_DRC_RUNSET}" ]; then
                cprintf "   \u2502  \u2502     \u251c ÷red÷${_WOLF_CALIBRE_DRC_RUNSET}÷÷\n"
            else 
                cprintf "   \u2502  \u2502     \u251c ÷green÷(+) ${_WOLF_CALIBRE_DRC_RUNSET}÷÷\n"
            fi
            if [ -f "$PROJ_DIR/inputs/calibre/${DESIGN_NAME}/$DESIGN_NAME.drc.runset" ]; then 
                cprintf "   \u2502  \u2502     \u251c ÷red÷$DESIGN_NAME.drc.runset÷÷\n"
            else 
                cprintf "   \u2502  \u2502     \u251c ÷green÷(+) $DESIGN_NAME.drc.runset÷÷\n"
            fi
            if [ -f "$PROJ_DIR/inputs/calibre/${DESIGN_NAME}/$DESIGN_NAME.lvs.runset" ]; then 
                cprintf "   \u2502  \u2502     \u251c ÷red÷$DESIGN_NAME.lvs.runset÷÷\n"
            else 
                cprintf "   \u2502  \u2502     \u251c ÷green÷(+) $DESIGN_NAME.lvs.runset÷÷\n"
            fi
            if [ -f "$PROJ_DIR/inputs/calibre/${DESIGN_NAME}/$DESIGN_NAME.lvs.cal" ]; then 
                cprintf "   \u2502  \u2502     \u251c ÷red÷$DESIGN_NAME.lvs.cal÷÷\n"
            else 
                cprintf "   \u2502  \u2502     \u251c ÷green÷(+) $DESIGN_NAME.lvs.cal÷÷\n"
            fi
            if [ -f "$PROJ_DIR/inputs/calibre/${DESIGN_NAME}/$DESIGN_NAME.verilog2spice.template.tcl" ]; then 
                cprintf "   \u2502  \u2502     \u2514 ÷red÷$DESIGN_NAME.verilog2spice.template.tcl÷÷\n"
            else 
                cprintf "   \u2502  \u2502     \u2514 ÷green÷(+) $DESIGN_NAME.verilog2spice.template.tcl÷÷\n"
            fi
            
            ####### CONSTRAINTS DIRECTORY
            if [ -d "$PROJ_DIR/inputs/constraints" ]; then 
                cprintf "÷white÷   \u2502 \u251c constraints÷÷\n"
            else 
                cprintf "   \u2502  \u251c ÷yellow÷(+) constraints÷÷\n"
            fi
            if [ -f "$PROJ_DIR/inputs/constraints/${DESIGN_NAME}.constraints.sdc" ]; then
                cprintf "   \u2502  \u2502  \u2514 ÷red÷${DESIGN_NAME}.constraints.sdc÷÷\n"
            else 
                cprintf "   \u2502  \u2502  \u2514 ÷green÷(+) ${DESIGN_NAME}.constraints.sdc÷÷\n"
            fi

            ####### ENV DIRECTORY
            if [ -d "$PROJ_DIR/inputs/env" ]; then 
                cprintf "÷white÷   \u2502 \u251c env÷÷\n"
            else 
                cprintf "   \u2502  \u251c ÷yellow÷(+) env÷÷\n"
            fi
            if [ -d "$PROJ_DIR/inputs/env/${DESIGN_NAME}" ]; then 
                cprintf "÷white÷   \u2502  \u2502  \u2514 ${DESIGN_NAME}÷÷\n"
            else 
                cprintf "   \u2502  \u2502  \u2514 ÷yellow÷(+) ${DESIGN_NAME}÷÷\n"
            fi
            # ENV FILES
            if [ -f "$PROJ_DIR/inputs/env/${DESIGN_NAME}/$DESIGN_NAME.env.csh" ]; then
                cprintf "   \u2502  \u2502     \u251c ÷red÷$DESIGN_NAME.env.csh÷÷\n"
            else 
                cprintf "   \u2502  \u2502     \u251c ÷green÷(+) $DESIGN_NAME.env.csh÷÷\n"
            fi
            if [ -f "$PROJ_DIR/inputs/env/${DESIGN_NAME}/$DESIGN_NAME.src.yaml" ]; then 
                cprintf "   \u2502  \u2502     \u251c ÷red÷$DESIGN_NAME.src.yaml÷÷\n"
            else 
                cprintf "   \u2502  \u2502     \u251c ÷green÷(+) $DESIGN_NAME.src.yaml÷÷\n"
            fi
            if [ -f "$PROJ_DIR/inputs/env/${DESIGN_NAME}/setup.$DESIGN_NAME.template.yaml" ]; then 
                cprintf "   \u2502  \u2502     \u251c ÷red÷setup.$DESIGN_NAME.template.yaml÷÷\n"
            else 
                cprintf "   \u2502  \u2502     \u251c ÷green÷(+) setup.$DESIGN_NAME.template.yaml÷÷\n"
            fi
            if [ -f "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.$WOLF_ENV_NAME.sh" ]; then 
                cprintf "   \u2502  \u2502     \u2514 ÷red÷wolf_setup.$WOLF_ENV_NAME.sh÷÷\n"
            else 
                cprintf "   \u2502  \u2502     \u2514 ÷green÷(+) wolf_setup.$WOLF_ENV_NAME.sh÷÷\n"
            fi

            ####### FLOORPLANS DIRECTORY
            if [ -d "$PROJ_DIR/inputs/floorplans" ]; then 
                cprintf "÷white÷   \u2502 \u251c floorplans÷÷\n"
            else 
                cprintf "   \u2502  \u251c ÷yellow÷(+) floorplans÷÷\n"
            fi
            if [ -d "$PROJ_DIR/inputs/floorplans/${DESIGN_NAME}" ]; then
                cprintf "÷white÷   \u2502  \u2502  \u2514 ${DESIGN_NAME}÷÷\n"
            else 
                cprintf "   \u2502  \u2502  \u2514 ÷yellow÷(+) ${DESIGN_NAME}÷÷\n"
            fi

            ####### HDL DIRECTORY
            if [ -d "$PROJ_DIR/inputs/hdl" ]; then 
                cprintf "÷white÷   \u2502 \u251c hdl÷÷\n"
            else 
                cprintf "   \u2502  \u251c ÷yellow÷(+) hdl÷÷\n"
            fi
            if [ -d "$PROJ_DIR/inputs/hdl/${DESIGN_NAME}" ]; then
                cprintf "÷white÷   \u2502  \u2502  \u2514 ${DESIGN_NAME}÷÷\n"
            else 
                cprintf "   \u2502  \u2502  \u2514 ÷yellow÷(+) ${DESIGN_NAME}÷÷\n"
            fi

            ####### LIB DIRS
            if [ -d "$PROJ_DIR/inputs/lib" ]; then 
                cprintf "÷white÷   \u2502 \u251c lib÷÷\n"
            else 
                cprintf "   \u2502  \u251c ÷yellow÷(+) lib÷÷\n"
            fi
            if [ -d "$PROJ_DIR/inputs/lib/gds" ]; then
                cprintf "÷white÷   \u2502  \u2502  \u251c gds÷÷\n"
            else 
                cprintf "   \u2502  \u2502  \u251c ÷yellow÷(+) gds÷÷\n"
            fi
            if [ -d "$PROJ_DIR/inputs/lib/lef" ]; then
                cprintf "÷white÷   \u2502  \u2502  \u251c lef÷÷\n"
            else 
                cprintf "   \u2502  \u2502  \u251c ÷yellow÷(+) lef÷÷\n"
            fi
            if [ -d "$PROJ_DIR/inputs/lib/spice" ]; then
                cprintf "÷white÷   \u2502  \u2502  \u251c spice÷÷\n"
            else 
                cprintf "   \u2502  \u2502  \u251c ÷yellow÷(+) spice÷÷\n"
            fi
            if [ -d "$PROJ_DIR/inputs/lib/timing" ]; then
                cprintf "÷white÷   \u2502  \u2502  \u251c timing÷÷\n"
            else 
                cprintf "   \u2502  \u2502  \u251c ÷yellow÷(+) timing÷÷\n"
            fi
            if [ -d "$PROJ_DIR/inputs/lib/verilog" ]; then
                cprintf "÷white÷   \u2502  \u2502  \u2514 verilog÷÷\n"
            else 
                cprintf "   \u2502  \u2502  \u2514 ÷yellow÷(+) verilog÷÷\n"
            fi


            ####### SCRIPTS DIRECTORY
            if [ -d "$PROJ_DIR/inputs/scripts" ]; then 
                cprintf "÷white÷   \u2502 \u251c scripts÷÷\n"
            else 
                cprintf "   \u2502  \u251c ÷yellow÷(+) scripts÷÷\n"
            fi
            if [ -d "$PROJ_DIR/inputs/scripts/${DESIGN_NAME}" ]; then
                cprintf "÷white÷   \u2502  \u2502  \u2514 ${DESIGN_NAME}÷÷\n"
            else 
                cprintf "   \u2502  \u2502  \u2514 ÷yellow÷(+) ${DESIGN_NAME}÷÷\n"
            fi
            if [ -f "$PROJ_DIR/inputs/scripts/${DESIGN_NAME}/${DESIGN_NAME}.floorplan.template.tcl" ]; then
                cprintf "   \u2502  \u2502     \u2514 ÷red÷${DESIGN_NAME}.floorplan.template.tcl÷÷\n"
            else 
                cprintf "   \u2502  \u2502     \u2514 ÷green÷(+) ${DESIGN_NAME}.floorplan.template.tcl÷÷\n"
            fi

            ####### TB DIRECTORY
            if [ -d "$PROJ_DIR/inputs/tb" ]; then 
                cprintf "÷white÷   \u2514 \u251c tb÷÷\n"
            else 
                cprintf "   \u2502  \u2514 ÷yellow÷(+) tb÷÷\n"
            fi
            if [ -d "$PROJ_DIR/inputs/tb/${DESIGN_NAME}" ]; then
                cprintf "÷white÷   \u2515     \u2514 ${DESIGN_NAME}÷÷\n"
            else 
                cprintf "   \u2502     \u2514 ÷yellow÷(+) ${DESIGN_NAME}÷÷\n"
            fi

            # ASK FOR CONFIRMATION TO MAKE MODIFICATIONS
            if $SKIP; then
                REPLY="Y"
            else
                # Ask for confirmation
                cprintf "\n÷Red÷÷bold÷ ÷white÷Are you sure you want to apply these modifications to the system? Note that if any files were present previously, they will be overwritten permanently. [y|N]÷÷ "
                read -p " " -n 1 -r
            fi 
            echo ""
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                # CALIBRE FILES
                mkdir -p "$PROJ_DIR/inputs/calibre/${DESIGN_NAME}"
                _wolf_ok "Calibre directory created successfully at ÷yellow÷$PROJ_DIR/inputs/calibre/${DESIGN_NAME}÷÷"

                # CONSTRAINTS FILE
                mkdir -p "$PROJ_DIR/inputs/constraints"
                _wolf_ok "Constraints directory created successfully at ÷yellow÷$PROJ_DIR/inputs/constraints÷÷"
                TEMPLATE_CONSTRAINTS_FILE="${_WOLF_DIR}/templates/${PROCESS,,}/${PROCESS,,}.constraints.template.sdc"
                if [ -f ${TEMPLATE_CONSTRAINTS_FILE} ]; then 
                    if [ -f "$PROJ_DIR/inputs/constraints/${DESIGN_NAME}.constraints.sdc" ]; then 
                        _wolf_info "Overwriting constraints file ÷yellow÷$PROJ_DIR/inputs/constraints/${DESIGN_NAME}.constraints.sdc÷÷"
                    else
                        _wolf_ok "Creating constraints file ÷yellow÷$PROJ_DIR/inputs/constraints/${DESIGN_NAME}.constraints.sdc÷÷ from template."
                    fi 
                    cp -f ${TEMPLATE_CONSTRAINTS_FILE} "$PROJ_DIR/inputs/constraints/${DESIGN_NAME}.constraints.sdc"
                else 
                    if [ -f "$PROJ_DIR/inputs/constraints/${DESIGN_NAME}.constraints.sdc" ]; then 
                        _wolf_info "Overwriting constraints file ÷yellow÷$PROJ_DIR/inputs/constraints/${DESIGN_NAME}.constraints.sdc÷÷. Creating from scratch (template file was not found)."
                        rm -f "$PROJ_DIR/inputs/constraints/${DESIGN_NAME}.constraints.sdc"
                    else
                        _wolf_ok "Creating constraints file ÷yellow÷$PROJ_DIR/inputs/constraints/${DESIGN_NAME}.constraints.sdc÷÷ from scratch (template file was not found)."
                    fi
                    touch "$PROJ_DIR/inputs/constraints/${DESIGN_NAME}.constraints.sdc"
                fi 

                # ENV FILES
                mkdir -p "$PROJ_DIR/inputs/env/${DESIGN_NAME}"
                _wolf_ok "Env directory created successfully at ÷yellow÷$PROJ_DIR/inputs/env/${DESIGN_NAME}÷÷"

                # SRC.yaml file 
                if [ -f "$PROJ_DIR/inputs/env/${DESIGN_NAME}/${DESIGN_NAME}.src.yaml" ]; then 
                    _wolf_info "Overwriting src.yaml file ÷yellow÷$PROJ_DIR/inputs/env/${DESIGN_NAME}/${DESIGN_NAME}.src.yaml÷÷. Creating from scratch."
                    rm -f "$PROJ_DIR/inputs/env/${DESIGN_NAME}/${DESIGN_NAME}.src.yaml"
                else
                    _wolf_ok "Creating src.yaml file ÷yellow÷$PROJ_DIR/inputs/env/${DESIGN_NAME}/${DESIGN_NAME}.src.yaml÷÷ from scratch."
                fi
                touch "$PROJ_DIR/inputs/env/${DESIGN_NAME}/${DESIGN_NAME}.src.yaml"
                echo "RTL:" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/${DESIGN_NAME}.src.yaml"
                echo "  ${DESIGN_NAME}:" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/${DESIGN_NAME}.src.yaml"
                echo "    init_hdl_search_path:" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/${DESIGN_NAME}.src.yaml"
                printf '      - ${INPUTS_DIR}/hdl/' >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/${DESIGN_NAME}.src.yaml"
                printf "${DESIGN_NAME}\n" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/${DESIGN_NAME}.src.yaml"
                echo "    systemverilog:" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/${DESIGN_NAME}.src.yaml"
                echo "      args:" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/${DESIGN_NAME}.src.yaml"
                echo "      files:" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/${DESIGN_NAME}.src.yaml"
                echo "        - ${DESIGN_NAME}.sv" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/${DESIGN_NAME}.src.yaml"
                echo "    vhdl:" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/${DESIGN_NAME}.src.yaml"
                echo "      args:" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/${DESIGN_NAME}.src.yaml"
                echo "      files:" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/${DESIGN_NAME}.src.yaml"

                TEMPLATE_ENV_CSH_FILE="${_WOLF_DIR}/templates/${PROCESS,,}/${PROCESS,,}.env.template.csh"
                if [ -f ${TEMPLATE_ENV_CSH_FILE} ]; then 
                    if [ -f "$PROJ_DIR/inputs/env/${DESIGN_NAME}/${DESIGN_NAME}.env.csh" ]; then 
                        _wolf_info "Overwriting design env bucket file ÷yellow÷$PROJ_DIR/inputs/env/${DESIGN_NAME}/${DESIGN_NAME}.env.csh÷÷"
                    else
                        _wolf_ok "Creating design env bucket file ÷yellow÷$PROJ_DIR/inputs/env/${DESIGN_NAME}/${DESIGN_NAME}.env.csh from template."
                    fi 
                    cp -f ${TEMPLATE_ENV_CSH_FILE} "$PROJ_DIR/inputs/env/${DESIGN_NAME}/${DESIGN_NAME}.env.csh"
                else 
                    if [ -f "$PROJ_DIR/inputs/env/${DESIGN_NAME}/${DESIGN_NAME}.env.csh" ]; then 
                        _wolf_info "Overwriting design env bucket file ÷yellow÷$PROJ_DIR/inputs/env/${DESIGN_NAME}/${DESIGN_NAME}.env.csh÷÷. Creating from scratch (template file was not found)."
                        rm -f "$PROJ_DIR/inputs/env/${DESIGN_NAME}/${DESIGN_NAME}.env.csh"
                    else
                        _wolf_ok "Creating design env bucket file ÷yellow÷$PROJ_DIR/inputs/env/${DESIGN_NAME}/${DESIGN_NAME}.env.csh÷÷ from scratch (template file was not found)."
                    fi
                    touch "$PROJ_DIR/inputs/env/${DESIGN_NAME}/${DESIGN_NAME}.env.csh"
                fi 

                TEMPLATE_SETUP_YAML_FILE="${_WOLF_DIR}/templates/${PROCESS,,}/${PROCESS,,}.setup.template.yaml"
                if [ -f ${TEMPLATE_SETUP_YAML_FILE} ]; then 
                    if [ -f "$PROJ_DIR/inputs/env/${DESIGN_NAME}/setup.${DESIGN_NAME}.template.yaml" ]; then 
                        _wolf_info "Overwriting design setup file ÷yellow÷$PROJ_DIR/inputs/env/${DESIGN_NAME}/.setup${DESIGN_NAME}.template.yaml÷÷"
                    else
                        _wolf_ok "Creating design setup file ÷yellow÷$PROJ_DIR/inputs/env/${DESIGN_NAME}/${DESIGN_NAME}.setup.template.yaml from template."
                    fi 
                    cp -f ${TEMPLATE_SETUP_YAML_FILE} "$PROJ_DIR/inputs/env/${DESIGN_NAME}/setup.${DESIGN_NAME}.template.yaml"
                else 
                    if [ -f "$PROJ_DIR/inputs/env/${DESIGN_NAME}/setup.${DESIGN_NAME}.template.yaml" ]; then 
                        _wolf_info "Overwriting design setup file ÷yellow÷$PROJ_DIR/inputs/env/${DESIGN_NAME}/setup.${DESIGN_NAME}.template.yaml÷÷. Creating from scratch (template file was not found)."
                        rm -f "$PROJ_DIR/inputs/env/${DESIGN_NAME}/setup.${DESIGN_NAME}.template.yaml"
                    else
                        _wolf_ok "Creating design setup file ÷yellow÷$PROJ_DIR/inputs/env/${DESIGN_NAME}/setup.${DESIGN_NAME}.template.yaml÷÷ from scratch (template file was not found)."
                    fi
                    touch "$PROJ_DIR/inputs/env/${DESIGN_NAME}/setup.${DESIGN_NAME}.template.yaml"
                fi 

                # wolf_setup.sh file 
                if [ -f "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh" ]; then 
                    _wolf_info "Overwriting wolf_setup file ÷yellow÷$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh. Creating from scratch."
                    rm -f "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                else
                    _wolf_ok "Creating wolf_setup file ÷yellow÷$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh÷÷ from scratch."
                fi
                
                touch "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "#!/bin/bash" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "# First, make sure you deactivate any previously activated wolf environments. If no env was activated" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "#   an error/warning message will appear just letting you know no name was provided to wolf env. Ignore this." >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "#   This is a bening warning." >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "wolf deactivate" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "# Now, in case this environment was previously defined, it is good practice to delete it before re-creating it." >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "#   Don't worry, wolf doesn't store any work in its wolf-environment internal directory. That's what the workspace is for" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "#   so all your previous work is safe. This is only going to delete temporary internal files that wolf uses for " >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "#   defining and keeping track of your environment." >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "wolf env remove -y --name ${WOLF_ENV_NAME}" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "# Now create the environment." >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "wolf env create --name ${WOLF_ENV_NAME}" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "# Activate it " >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "wolf activate ${WOLF_ENV_NAME}" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "# Set up the process for this environment. Valid options are: GF22, TSMC65 and TSMC28" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "wolf set PROCESS ${PROCESS}" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "# Set up the design name. This apparently innocuous step is extremely important, as this name will be propagated" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "#   thru the whole environment. This must be the top module's name of your RTL." >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "wolf set DESIGN_NAME ${DESIGN_NAME}" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "# Set the project directory where the project structure will be defined. Note that this can be shared by multiple wolf" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "#   environments. This is the dir where the \"inputs/outputs/workspace\" tree structure will be." >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "#       * In the case of Kona, this is probably going to be:   /asic/projects/FNAL/<PROJECT_NAME>/$USER" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "#       * In the case of Beast1, this is probably going to be: /asic/projects/<PROJECT_NAME>/$USER" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "wolf set PROJ_DIR ${PROJ_DIR}" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "# Now let's set the metal stack. Valid options are (defaults are marked with **):" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "#   For TSMC65:" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "#       * 6lmT1" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "#       * 6lmT2" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "#       * 7lmT1" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "#       * 7lmT2" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "#       * 8lmT1" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "#       * 8lmT2" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "#       * 9lmT1" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "#       ** 9lmT2" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "#   For GF22:" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "#       * 7M_2Mx_4Cx_1Ix_LB" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "#       * 7M_2Mx_3Cx_1Ix_1Ox_LB" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "#       * 8M_2Mx_5Cx_1Ix_LB" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "#       * 8M_2Mx_4Cx_2Ix_LB" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "#       * 8M_2Mx_4Cx_1Ix_1Ox_LB" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "#       * 9M_2Mx_5Cx_1Jx_1Ox_LB" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "#       * 9M_2Mx_3Cx_2Bx_1Ix_1Ox_LB__eMRAM" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "#       * 9M_2Mx_5Cx_2Ix_LB" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "#       * 9M_2Mx_3Cx_2Bx_1Ix_1Ox_LB" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "#       ** 9M_2Mx_3Cx_2Bx_1Ix_1Ox_LBthick__eMRAM" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "#       * 10M_2Mx_4Cx_2Bx_2Jx_LB" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "#       * 10M_2Mx_4Cx_2Bx_2Jx_LB__eMRAM" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "#       * 10M_2Mx_5Cx_1Jx_2Qx_LB" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "#       * 10M_2Mx_6Cx_2Ix_LB" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "wolf set METAL_STACK ${METAL_STACK}" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "# Now we can create the project structure and placeholders automatically. This will help us a lot in the process of" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "#   populating the environment." >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "wolf env auto-setup" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "# Now let's add the design bucket. This will define some variables specific to the project we are currently working on." >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "#   It's good practice to keep this bucket in your <PROJ_DIR>/inputs/env/<design_name> folder and name it <design_name>.env.csh" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "wolf update --bucket $PROJ_DIR/inputs/env/${DESIGN_NAME}/${DESIGN_NAME}.env.csh" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "# Now let's add the process bucket. This will define common variables for any project in the process we are using." >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "#   Note that the process bucket DEPENDS on some variables that should be defined in the design bucket! So" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "#   you should always add them in this specific order." >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "#   in Kona" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "#       for tsmc65: /profiles/lib/TSMC65nmWolfProfile.wlf" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "#       for gf22: /profiles/lib/GF22nmWolfProfile.wlf" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "#   in Beast1:" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "#       for tsmc65: /fasic_home/manuelbv/profiles/lib/TSMC65nmWolfProfile.wlf" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "#       for gf22: <coming up>" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "#       for tsmc28: /fasic_home/manuelbv/profiles/lib/TSMC28nmWolfProfile.wlf" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"

                _WOLF_ENV_DESIGN_BUCKET="$PROJ_DIR/inputs/env/${DESIGN_NAME}/${DESIGN_NAME}.env.csh"
                case `hostname` in 
                    "kona-ubuntu")
                        _WOLF_ENV_PROCESS_BUCKET_FILE="/profiles/lib/${PROCESS}nmWolfProfile.wlf"
                        echo "wolf update --bucket /profiles/lib/${PROCESS}nmWolfProfile.wlf" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                        ;;
                    "fasic-beast1.fnal.gov")
                        _WOLF_ENV_PROCESS_BUCKET_FILE="/fasic_home/manuelbv/profiles/lib/${PROCESS}nmWolfProfile.wlf"
                        echo "wolf update --bucket /fasic_home/manuelbv/profiles/lib/${PROCESS}nmWolfProfile.wlf" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                        ;;
                    *)
                        _WOLF_ENV_PROCESS_BUCKET_FILE="<PATH_TO_${PROCESS}nmWolfProfile.wlf>"
                        echo "wolf update --bucket <PATH_TO_${PROCESS}nmWolfProfile.wlf>" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                        ;;
                esac

                echo "# Finally, print the status of the environment (print all the variables defined)" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"
                echo "wolf env status" >> "$PROJ_DIR/inputs/env/${DESIGN_NAME}/wolf_setup.${WOLF_ENV_NAME}.sh"


                # FLOORPLANS DIR
                mkdir -p "$PROJ_DIR/inputs/floorplans/${DESIGN_NAME}"
                _wolf_ok "Floorplans directory created successfully at ÷yellow÷$PROJ_DIR/inputs/floorplans/${DESIGN_NAME}÷÷"

                # HDL DIR
                mkdir -p "$PROJ_DIR/inputs/hdl/${DESIGN_NAME}"
                _wolf_ok "HDL directory created successfully at ÷yellow÷$PROJ_DIR/inputs/hdl/${DESIGN_NAME}÷÷"

                # SCRIPTS FILE
                mkdir -p "$PROJ_DIR/inputs/scripts/${DESIGN_NAME}"
                _wolf_ok "Scripts directory created successfully at ÷yellow÷$PROJ_DIR/inputs/scripts/${DESIGN_NAME}÷÷"
                TEMPLATE_FLOORPLAN_SCRIPTS_FILE="${_WOLF_DIR}/templates/${PROCESS,,}/${PROCESS,,}.floorplan.template.tcl"
                if [ -f ${TEMPLATE_FLOORPLAN_SCRIPTS_FILE} ]; then 
                    if [ -f "$PROJ_DIR/inputs/scripts/${DESIGN_NAME}/${DESIGN_NAME}.floorplan.template.tcl" ]; then 
                        _wolf_info "Overwriting floorplan script file ÷yellow÷$PROJ_DIR/inputs/scripts/${DESIGN_NAME}/${DESIGN_NAME}.floorplan.template.tcl÷÷"
                    else
                        _wolf_ok "Creating floorplan script file ÷yellow÷$PROJ_DIR/inputs/scripts/${DESIGN_NAME}/${DESIGN_NAME}.floorplan.template.tcl÷÷ from template."
                    fi 
                    cp -f ${TEMPLATE_FLOORPLAN_SCRIPTS_FILE} "$PROJ_DIR/inputs/scripts/${DESIGN_NAME}/${DESIGN_NAME}.floorplan.template.tcl"
                else 
                    if [ -f "$PROJ_DIR/inputs/scripts/${DESIGN_NAME}/${DESIGN_NAME}.floorplan.template.tcl" ]; then 
                        _wolf_info "Overwriting floorplan script file ÷yellow÷$PROJ_DIR/inputs/scripts/${DESIGN_NAME}/${DESIGN_NAME}.floorplan.template.tcl÷÷. Creating from scratch (template file was not found)."
                        rm -f "$PROJ_DIR/inputs/scripts/${DESIGN_NAME}/${DESIGN_NAME}.floorplan.template.tcl"
                    else
                        _wolf_ok "Creating floorplan script file ÷yellow÷$PROJ_DIR/inputs/scripts/${DESIGN_NAME}/${DESIGN_NAME}.floorplan.template.tcl÷÷ from scratch (template file was not found)."
                    fi
                    touch "$PROJ_DIR/inputs/scripts/${DESIGN_NAME}/${DESIGN_NAME}.floorplan.template.tcl"
                fi 

                # TB DIR
                mkdir -p "$PROJ_DIR/inputs/tb/${DESIGN_NAME}"
                _wolf_ok "TB directory created successfully at ÷yellow÷$PROJ_DIR/inputs/tb/${DESIGN_NAME}÷÷"


                # Now print a message letting the user know that they probably want to append the buckets:
                cprintf "\n÷Blue÷÷bold÷ ÷white÷Post-autosetup remaining tasks                                                          ÷÷ \n"
                _wolf_info "IMPORTANT!! Please note that in order to complete the setup of this environment you need to attach both the design bucket as well as the process bucket. In order to do so, you need to run the following commands:"
                cprintf "   "; _wolf_entry "wolf update --bucket ${_WOLF_ENV_DESIGN_BUCKET}"
                cprintf "   "; _wolf_entry "wolf update --bucket ${_WOLF_ENV_PROCESS_BUCKET_FILE}"
                # ASK FOR CONFIRMATION TO MAKE MODIFICATIONS
                if $SKIP; then
                    REPLY="Y"
                else
                    # Ask for confirmation
                    cprintf "\n÷Red÷÷bold÷ ÷white÷Do you want to execute these commands automatically now? [y|N]÷÷ "
                    read -p " " -n 1 -r
                fi 
                echo ""
                if [[ $REPLY =~ ^[Yy]$ ]]; then
                    wolf update --bucket "${_WOLF_ENV_DESIGN_BUCKET}"
                    wolf update --bucket "${_WOLF_ENV_PROCESS_BUCKET_FILE}"
                    _wolf_info "Wolf environment automatically set up. All done!"
                    cprintf "\n÷Blue÷÷bold÷ ÷white÷Checking the environment                                                                ÷÷ \n"
                    wolf env status
                fi


            else 
                _wolf_info "Modifications not applied. System left untouched."
            fi

            

            ;;
        *)
            _wolf_error "Invalid command passed to wolf env. Wolf requires at least 1 command to be executed. Valid commands are: \"create\", \"list\""
            ;;
    esac

}
