#!/bin/bash

#####################################################################################
# MAKE SURE WE HAVE ALL SOURCE CODE WE NEED
#####################################################################################
_WOLF_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
_WOLF_DIR=`dirname "$_WOLF_DIR"`
_WOLF_BIN="${_WOLF_DIR}/bin"
if [[ ! -d ${_WOLF_BIN} || ! -f "${_WOLF_BIN}/utils" || ! -f "${_WOLF_BIN}/wolf.run" ]]; then
    printf "\033[1;7;31m [ERROR] - Invalid installation. Some binary files required to run wolf are either missing or unaccessible. Contact your cadadmin to fix this."
fi

#####################################################################################
# Source utils
#####################################################################################
source "${_WOLF_BIN}/utils"

#####################################################################################
# WOLF ENV HANDLER ALIAS
#####################################################################################
_wolf_env () {

    #####################################################################################
    # Make sure the local folder ".wolf" exists on user's path
    #####################################################################################
    _WOLF_ENV_DIR="${HOME}/.wolf/envs"
    if [[ ! -d "$_WOLF_ENV_DIR" && ! -L "$_WOLF_ENV_DIR" ]]; then 
        _wolf_info "First runtime detected. Creating wolf environments dir at ÷yellow÷\"$_WOLF_ENV_DIR\"÷÷"
        mkdir -p "$_WOLF_ENV_DIR"
    fi

    #####################################################################################
    # Get list of environments
    #####################################################################################
    _WOLF_ENVS_LIST=`find "$_WOLF_ENV_DIR" -maxdepth 1 -mindepth 1 -type d | sort -n`

    ###########################################
    # Init vars to default values
    #
    ##########################################
    _WOLF_ENV_ARGS_COMMAND=
    _WOLF_ENV_ARGS_NAME=
    _WOLF_ENV_ARGS_UPDATE_BUCKET=false
    _WOLF_ENV_ARGS_BUCKET_LIST=()

    ###########################################
    # Parse flags
    ##########################################
    _WOLF_ENV_ARGS_POSITIONAL=()
    while [[ $# -gt 0 ]]; do
        _WOLF_ENV_ARGS_KEY="$1"
            case $_WOLF_ENV_ARGS_KEY in
                -h|--help)
                    # Help dialog
                    echo -e "Usage $(basename $BASH_SOURCE) [OPTIONS]... [EXTRA_ARGUMENTS]..."
                    echo "Wolf environment manager"
                    echo ""
                    echo "Main arguments taken $(basename $BASH_SOURCE):"
                    echo -e "\t-h, --help\t\tInvokes this dialog.\n"
                    echo -e "Options/commands passed to wolf env:\n"
                    echo -e "\tcreate \t\tCreates a new environment."
                    echo -e "\tlist \t\tList all available environments."
                    echo -e "Arguments taken by \"wolf env create\":\n"
                    echo -e "\t-n, --name \t\tSpecifies the name of the environment."
                    echo -e "Arguments taken by wolf env list:\n"
                    exit 0
                    ;;
                list)
                    _WOLF_ENV_ARGS_COMMAND="LIST"
                    shift # pass argument
                    ;;
                create)
                    _WOLF_ENV_ARGS_COMMAND="CREATE"
                    shift # pass argument
                    ;;
                remove)
                    _WOLF_ENV_ARGS_COMMAND="REMOVE"
                    shift
                    ;;
                activate)
                    _WOLF_ENV_ARGS_COMMAND="ACTIVATE"
                    _WOLF_ENV_ARGS_NAME="$2"
                    shift
                    shift
                    ;;
                deactivate)
                    _WOLF_ENV_ARGS_COMMAND="DEACTIVATE"
                    _WOLF_ENV_ARGS_NAME="$2"
                    shift
                    shift
                    ;;
                update)
                    _WOLF_ENV_ARGS_COMMAND="UPDATE"
                    _WOLF_ENV_ARGS_NAME="$2"
                    shift
                    shift
                    ;;
                reload)
                    _WOLF_ENV_ARGS_COMMAND="RELOAD"
                    _WOLF_ENV_ARGS_NAME="$2"
                    shift
                    shift
                    ;;
                status)
                    _WOLF_ENV_ARGS_COMMAND="STATUS"
                    shift
                    ;;
                set)
                    _WOLF_ENV_ARGS_COMMAND="SET"
                    _WOLF_ENV_ARGS_NAME="$2"
                    _WOLF_ENV_ARGS_VAR_NAME="$3"
                    shift
                    shift
                    shift
                    _WOLF_ENV_ARGS_VAR_VALUE="$@"
                    shift
                    ;;
                history)
                    _WOLF_ENV_ARGS_COMMAND="HISTORY"
                    _WOLF_ENV_ARGS_NAME="$2"
                    shift
                    shift
                    ;;
                --bucket)
                    _WOLF_ENV_ARGS_UPDATE_BUCKET=true
                    _WOLF_ENV_ARGS_BUCKET_LIST+=("$2")
                    shift 
                    shift
                    ;;
                -n|--name)
                    _WOLF_ENV_ARGS_NAME="$2"
                    shift
                    shift 
                    ;;
            *)    # unknown option
            _WOLF_ENV_ARGS_POSITIONAL+=("$1") # save it in an array for later
            _WOLF_ENV_ARGS_POSITIONAL+=("$2")
            shift # past argument
            shift # past value
            ;;
        esac
    done
    set -- "${_WOLF_ENV_ARGS_POSITIONAL[@]}" # restore positional parameters

    #############################################
    # Invoke _WOLF_ENV_ARGS_COMMAND
    #
    ############################################
    case $_WOLF_ENV_ARGS_COMMAND in
        LIST)
            # Print header
            cprintf "$_WOLF_ENV_HEADER"
            cprintf "\n÷Blue÷÷bold÷ ÷white÷Available environments                                                                    ÷÷ \n"
            if [[ ! -z $_WOLF_ENVS_LIST ]]; then
                _WOLF_ENVS_LIST=($(echo "${_WOLF_ENVS_LIST[@]}" | xargs))
                _WOLF_ENV_ARGS_NUM_ENVS="${#_WOLF_ENVS_LIST[@]}"
                for ((i=0; i<_WOLF_ENV_ARGS_NUM_ENVS; i++)); do
                    printf " "
                    _wolf_entry "÷÷÷yellow÷`basename ${_WOLF_ENVS_LIST[$i]}`÷÷       \t${_WOLF_ENVS_LIST[$i]}"
                done
                unset i
                printf "\n"
            else 
                # Print empty warning message
                cprintf "÷red÷No wolf environment ÷÷detected in ÷yellow÷\"$_WOLF_ENV_DIR\"÷÷.\n\n"
            fi
            ;;
        CREATE|REMOVE)
            # Make sure name is valid
            if [[ -z $_WOLF_ENV_ARGS_NAME ]]; then
                _wolf_error "Create/Remove command requires a name to be passed to wolf using the flag \"--name\",\n\te.g. ÷blue÷wolf env create ÷red÷--name <ENV_NAME>÷÷"
            else 
                # We are clear. Let's create the env.
                cprintf "$_WOLF_ENV_HEADER"

                # Create folder
                _WOLF_ENV_ARGS_ENV_FOLDER="$_WOLF_ENV_DIR/$_WOLF_ENV_ARGS_NAME"
  
                case $_WOLF_ENV_ARGS_COMMAND in
                    CREATE)
                        cprintf "\n÷Blue÷÷bold÷ ÷white÷Environment creation                                                                    ÷÷ \n"
                        if [[ -d "$_WOLF_ENV_DIR/$_WOLF_ENV_ARGS_NAME" || -L "$_WOLF_ENV_DIR/$_WOLF_ENV_ARGS_NAME" ]]; then 
                            _wolf_error "\nWolf environment ÷yellow÷\"$_WOLF_ENV_ARGS_NAME\"÷÷ already exists at ÷yellow÷\"$_WOLF_ENV_DIR/$_WOLF_ENV_ARGS_NAME\"÷÷. Skipping operation."
                        else
                            # Make sure env folder exists
                            mkdir -p "$_WOLF_ENV_ARGS_ENV_FOLDER"

                            # Init files
                            # ACTIVATE SCRIPT
                            _WOLF_ACT_ENV_FILE="$_WOLF_ENV_ARGS_ENV_FOLDER/activate"
                            touch "$_WOLF_ACT_ENV_FILE"
                            echo "#!/bin/bash" >> "$_WOLF_ACT_ENV_FILE" 
                            echo "export WOLF_ENV_NAME=\"$_WOLF_ENV_ARGS_NAME\"" >> "$_WOLF_ACT_ENV_FILE"
                            echo "export WOLF_ENV_DIR=\"$_WOLF_ENV_ARGS_ENV_FOLDER\"" >> "$_WOLF_ACT_ENV_FILE"
                            echo "" >> "$_WOLF_ACT_ENV_FILE"
                            # The rest is just the template
                            cat "$_WOLF_DIR/templates/activate.template" >> "$_WOLF_ACT_ENV_FILE"

                            # https://stackoverflow.com/questions/3223904/save-and-restore-shell-variables
                            #set > /tmp/pre
                            #foo=bar
                            #set > /tmp/post
                            #grep -v -F -f/tmp/pre /tmp/post > /tmp/vars

                            # DEACTIVATE ENV SCRIPT
                            _WOLF_DEACT_ENV_FILE="$_WOLF_ENV_ARGS_ENV_FOLDER/deactivate"
                            touch "$_WOLF_DEACT_ENV_FILE"
                            echo "#!/bin/bash" >> "$_WOLF_DEACT_ENV_FILE" 
                            echo "export PS1=\"\$WOLF_PS1_BACKUP\"" >> "$_WOLF_DEACT_ENV_FILE" 
                            echo "export WOLF_ENV_NAME=\"$_WOLF_ENV_ARGS_NAME\"" >> "$_WOLF_DEACT_ENV_FILE"
                            echo "export WOLF_ENV_DIR=\"$_WOLF_ENV_ARGS_ENV_FOLDER\"" >> "$_WOLF_DEACT_ENV_FILE"
                            echo "_WOLF_VARS_TO_IGNORE=\"${_WOLF_VARS_TO_IGNORE}\"" >> "$_WOLF_DEACT_ENV_FILE"
                            # The rest is just the template
                            cat "$_WOLF_DIR/templates/deactivate.template" >> "$_WOLF_DEACT_ENV_FILE"

                            # Print info
                            _wolf_ok "Wolf environment ÷yellow÷\"$_WOLF_ENV_ARGS_NAME\"÷÷ created at ÷yellow÷\"$_WOLF_ENV_DIR/$_WOLF_ENV_ARGS_NAME\"÷÷."
                        fi
                        ;;
                    
                    REMOVE)
                        if [[ ! -d "$_WOLF_ENV_DIR/$_WOLF_ENV_ARGS_NAME" && ! -L "$_WOLF_ENV_DIR/$_WOLF_ENV_ARGS_NAME" ]]; then 
                            _wolf_error "\nWolf environment ÷yellow÷\"$_WOLF_ENV_ARGS_NAME\"÷÷ does not exists at ÷yellow÷\"$_WOLF_ENV_DIR/$_WOLF_ENV_ARGS_NAME\"÷÷. Skipping operation."
                        else
                            # Ask for confirmation
                            cprintf "\n÷Red÷÷bold÷ ÷white÷Are you sure you want to remove environment ÷yellow÷\"$_WOLF_ENV_DIR/$_WOLF_ENV_ARGS_NAME\"÷white÷ permanently? [y|N]÷÷ "
                            read -p " " -n 1 -r
                            echo ""
                            if [[ $REPLY =~ ^[Yy]$ ]]; then
                                backup_dir=`echo $_WOLF_ENV_DIR`
                                backup_name=`echo $_WOLF_ENV_ARGS_NAME`
                                #source "$_WOLF_ENV_DIR/$_WOLF_ENV_ARGS_NAME/deactivate"
                                rm -rf "$backup_dir/$backup_name"
                                _wolf_ok "Wolf environment ÷yellow÷\"$backup_name\"÷÷ successfully removed from ÷yellow÷\"$backup_dir/$backup_name\"÷÷."
                            else 
                                _wolf_info "Wolf environment ÷yellow÷\"$_WOLF_ENV_ARGS_NAME\"÷÷ left untouched."
                            fi
                        fi
                        ;;
                esac
            fi
            ;;
        ACTIVATE)
            if [[ -z $_WOLF_ENV_ARGS_NAME ]]; then
                _wolf_error "No env name provided to activate function. Skipping."
            else
                source "$_WOLF_ENV_DIR/$_WOLF_ENV_ARGS_NAME/activate"
            fi
            ;;
        UPDATE)
            if $_WOLF_ENV_ARGS_UPDATE_BUCKET; then 
                if [ ${#_WOLF_ENV_ARGS_BUCKET_LIST[@]} -eq 0 ]; then
                    _WOLF_ENV_ARGS_BUCKET_LIST=$(dialog --stdout --title "Please choose a file" --fselect $HOME/ $(expr $LINES - 15) $(expr $COLUMNS - 10))
                fi
                touch "$_WOLF_ENV_DIR/$_WOLF_ENV_ARGS_NAME/bucket.p"
                if [[ -f "$_WOLF_ENV_ARGS_BUCKET_LIST" || -L "$_WOLF_ENV_ARGS_BUCKET_LIST" ]]; then
                    if [[ ! -f "$_WOLF_ENV_DIR/$_WOLF_ENV_ARGS_NAME/bucket.p" && ! -L "$_WOLF_ENV_DIR/$_WOLF_ENV_ARGS_NAME/bucket.p" ]]; then  
                        echo "#!/bin/bash" >> "$_WOLF_ENV_DIR/$_WOLF_ENV_ARGS_NAME/bucket.p"
                    fi
                    for f in "${_WOLF_ENV_ARGS_BUCKET_LIST[@]}"; do
                        if grep -q "source \"$f\"" "$_WOLF_ENV_DIR/$_WOLF_ENV_ARGS_NAME/bucket.p"; then
                            # code if found
                            echo "$(grep -v "source \"$f\"" $_WOLF_ENV_DIR/$_WOLF_ENV_ARGS_NAME/bucket.p)" >"$_WOLF_ENV_DIR/$_WOLF_ENV_ARGS_NAME/bucket.p"
                        fi
                        echo "source \"$f\"" >> "$_WOLF_ENV_DIR/$_WOLF_ENV_ARGS_NAME/bucket.p"
                    done
                fi
                source "$_WOLF_ENV_DIR/$_WOLF_ENV_ARGS_NAME/bucket.p"
                _wolf_ok "Bucket source file \"$_WOLF_ENV_DIR/$_WOLF_ENV_ARGS_NAME/bucket.p\" successfully updated"

            elif [[ -z $_WOLF_ENV_ARGS_NAME ]]; then
                _wolf_error "No env name provided to update function. Skipping."
            fi
            ;;
        DEACTIVATE)
            if [[ -z $_WOLF_ENV_ARGS_NAME ]]; then
                _wolf_error "No env name provided to deactivate function. Skipping."
            else
                source "$_WOLF_ENV_DIR/$_WOLF_ENV_ARGS_NAME/deactivate"
            fi
            ;;
        RELOAD)
            if [[ -z $_WOLF_ENV_ARGS_NAME ]]; then
                _wolf_error "No env name provided to reload function. Skipping."
            else
                source "$_WOLF_ENV_DIR/$_WOLF_ENV_ARGS_NAME/deactivate"
                source "$_WOLF_ENV_DIR/$_WOLF_ENV_ARGS_NAME/activate"
            fi
            ;;
        STATUS)
            if [[ ! -v WOLF_ENV_NAME ]]; then
                _wolf_error "No wolf environment name detected. Please, activate a wolf environment before running this function. Skipping."
            else
                if [[ -f "$_WOLF_ENV_DIR/$WOLF_ENV_NAME/vars.env" || -L "$_WOLF_ENV_DIR/$WOLF_ENV_NAME/vars.env" ]]; then 
                    cat "$_WOLF_ENV_DIR/$WOLF_ENV_NAME/vars.env"
                fi
            fi
            ;;
        SET)
            if [[ ! -v WOLF_ENV_NAME ]]; then 
                _wolf_error "No wolf environment name detected. Please, activate a wolf environment before running this function. Skipping."
            else 
                if [[ -f "$_WOLF_ENV_DIR/$WOLF_ENV_NAME/vars.env" || -L "$_WOLF_ENV_DIR/$WOLF_ENV_NAME/vars.env" ]]; then 
                    if grep -q "$_WOLF_ENV_ARGS_VAR_NAME" "$_WOLF_ENV_DIR/$WOLF_ENV_NAME/vars.env"; then
                        # code if found
                        echo "$(grep -v "$_WOLF_ENV_ARGS_VAR_NAME=" $_WOLF_ENV_DIR/$WOLF_ENV_NAME/vars.env)" >$_WOLF_ENV_DIR/$WOLF_ENV_NAME/vars.env
                    fi
                else
                    # code if not found
                    touch "$_WOLF_ENV_DIR/$WOLF_ENV_NAME/vars.env"
                fi
                echo "${_WOLF_ENV_ARGS_VAR_NAME}=${_WOLF_ENV_ARGS_VAR_VALUE}" >> $_WOLF_ENV_DIR/$WOLF_ENV_NAME/vars.env
                export $(cat "$_WOLF_ENV_DIR/$WOLF_ENV_NAME/vars.env") &> /dev/null 
            fi
            ;;
        UNSET)
            if [[ ! -v WOLF_ENV_NAME ]]; then 
                _wolf_error "No wolf environment name detected. Please, activate a wolf environment before running this function. Skipping."
            else 
                if [[ -f "$_WOLF_ENV_DIR/$WOLF_ENV_NAME/vars.env" || -L "$_WOLF_ENV_DIR/$WOLF_ENV_NAME/vars.env" ]]; then 
                    if grep -q "$_WOLF_ENV_ARGS_VAR_NAME" "$_WOLF_ENV_DIR/$WOLF_ENV_NAME/vars.env"; then
                        # code if found
                        echo "$(grep -v "$_WOLF_ENV_ARGS_VAR_NAME=" $_WOLF_ENV_DIR/$WOLF_ENV_NAME/vars.env)" >$_WOLF_ENV_DIR/$WOLF_ENV_NAME/vars.env
                    fi
                fi
                unset "${_WOLF_ENV_ARGS_VAR_NAME}"
            fi
            ;;
        HISTORY)
            if [[ -z $_WOLF_ENV_ARGS_NAME ]]; then
                _wolf_error "No env name provided to activate function. Skipping."
            else
                #cprintf "\n÷Blue÷÷bold÷ ÷white÷History of runs                                                                    ÷÷ \n"
                printed=false
                while read -r key
                do 
                    # Access key
                    _WOLF_HISTORY_KEY_CMD1=$(cat $_WOLF_ENV_DIR/$_WOLF_ENV_ARGS_NAME/history | shyaml get-value ${key}.cmd1 2>/dev/null )
                    _WOLF_HISTORY_KEY_CMD2=$(cat $_WOLF_ENV_DIR/$_WOLF_ENV_ARGS_NAME/history | shyaml get-value ${key}.cmd2 2>/dev/null )
                    _WOLF_HISTORY_KEY_DATE=$(cat $_WOLF_ENV_DIR/$_WOLF_ENV_ARGS_NAME/history | shyaml get-value ${key}.date 2>/dev/null )
                    _WOLF_HISTORY_KEY_DIR=$(cat $_WOLF_ENV_DIR/$_WOLF_ENV_ARGS_NAME/history | shyaml get-value ${key}.dir 2>/dev/null )
                    printed=true
                    cprintf "÷Blue÷÷bold÷÷yellow÷${key}: ÷white÷${_WOLF_HISTORY_KEY_DATE}\033[K÷÷\n"
                    _wolf_entry "÷÷÷red÷${_WOLF_HISTORY_KEY_CMD1}÷÷"
                    _wolf_entry "÷÷÷yellow÷${_WOLF_HISTORY_KEY_DIR}÷÷"
                    _wolf_entry "÷÷÷white÷${_WOLF_HISTORY_KEY_CMD2}÷÷\n"

                done < <(cat $_WOLF_ENV_DIR/$_WOLF_ENV_ARGS_NAME/history | shyaml keys )
                
                if ! $printed; then
                    cprintf "÷red÷No history ÷÷detected for this environment ÷yellow÷\"$_WOLF_ENV_ARGS_NAME\"÷÷.\n\n"
                fi

            fi
            ;;
        *)
            _wolf_error "Invalid command passed to wolf env. Wolf requires at least 1 command to be executed. Valid commands are: \"create\", \"list\""
            ;;
    esac

}
