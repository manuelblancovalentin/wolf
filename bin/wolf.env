#!/bin/bash

#####################################################################################
# MAKE SURE WE HAVE ALL SOURCE CODE WE NEED
#####################################################################################
WOLF_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
WOLF_DIR=`dirname "$WOLF_DIR"`
WOLF_BIN="${WOLF_DIR}/bin"
if [[ ! -d ${WOLF_BIN} || ! -f "${WOLF_BIN}/utils" || ! -f "${WOLF_BIN}/wolf.run" ]]; then
    printf "\033[1;7;31m [ERROR] - Invalid installation. Some binary files required to run wolf are either missing or unaccessible. Contact your cadadmin to fix this."
fi

#####################################################################################
# Source utils
#####################################################################################
source "${WOLF_BIN}/utils"

#####################################################################################
# WOLF ENV HANDLER ALIAS
#####################################################################################
_wolf_env () {

    # Unset all vars
    unset ENV_DIR
    unset env_list
    unset COMMAND
    unset NAME
    unset POSITIONAL

    #####################################################################################
    # Make sure the local folder ".wolf" exists on user's path
    #####################################################################################
    ENV_DIR="${HOME}/.wolf/envs"
    if [[ ! -d "$ENV_DIR" && ! -L "$ENV_DIR" ]]; then 
        _wolf_info "First runtime detected. Creating wolf environments dir at ÷yellow÷\"$ENV_DIR\"÷÷"
        mkdir -p "$ENV_DIR"
    fi

    #####################################################################################
    # Get list of environments
    #####################################################################################
    env_list=`find "$ENV_DIR" -maxdepth 1 -mindepth 1 -type d | sort -n`

    ###########################################
    # Init vars to default values
    #
    ##########################################
    COMMAND=
    NAME=
    UPDATE_BUCKET=false
    WOLF_BUCKET_LIST=()

    ###########################################
    # Parse flags
    ##########################################
    POSITIONAL=()
    while [[ $# -gt 0 ]]; do
        key="$1"
            case $key in
                -h|--help)
                    # Help dialog
                    echo -e "Usage $(basename $BASH_SOURCE) [OPTIONS]... [EXTRA_ARGUMENTS]..."
                    echo "Wolf environment manager"
                    echo ""
                    echo "Main arguments taken $(basename $BASH_SOURCE):"
                    echo -e "\t-h, --help\t\tInvokes this dialog.\n"
                    echo -e "Options/commands passed to wolf env:\n"
                    echo -e "\tcreate \t\tCreates a new environment."
                    echo -e "\tlist \t\tList all available environments."
                    echo -e "Arguments taken by \"wolf env create\":\n"
                    echo -e "\t-n, --name \t\tSpecifies the name of the environment."
                    echo -e "Arguments taken by wolf env list:\n"
                    exit 0
                    ;;
                list)
                    COMMAND="LIST"
                    shift # pass argument
                    ;;
                create)
                    COMMAND="CREATE"
                    shift # pass argument
                    ;;
                remove)
                    COMMAND="REMOVE"
                    shift
                    ;;
                activate)
                    COMMAND="ACTIVATE"
                    NAME="$2"
                    shift
                    shift
                    ;;
                deactivate)
                    COMMAND="DEACTIVATE"
                    NAME="$2"
                    shift
                    shift
                    ;;
                update)
                    COMMAND="UPDATE"
                    NAME="$2"
                    shift
                    shift
                    ;;
                reload)
                    COMMAND="RELOAD"
                    NAME="$2"
                    shift
                    shift
                    ;;
                --bucket)
                    UPDATE_BUCKET=true
                    WOLF_BUCKET_LIST+=("$2")
                    shift 
                    shift
                    ;;
                -n|--name)
                    NAME="$2"
                    shift
                    shift 
                    ;;
            *)    # unknown option
            POSITIONAL+=("$1") # save it in an array for later
            POSITIONAL+=("$2")
            shift # past argument
            shift # past value
            ;;
        esac
    done
    set -- "${POSITIONAL[@]}" # restore positional parameters


    #############################################
    # Invoke COMMAND
    #
    ############################################
    case $COMMAND in
        LIST)
            # Print header
            cprintf "$wolf_env_header"
            cprintf "\n÷Blue÷÷bold÷ ÷white÷Available environments                                                                    ÷÷ \n"
            if [[ ! -z $env_list ]]; then
                env_list=($(echo "${env_list[@]}" | xargs))
                num_envs="${#env_list[@]}"
                for ((i=0; i<num_envs; i++)); do
                    printf " "
                    _wolf_entry "÷÷÷yellow÷`basename ${env_list[$i]}`÷÷       \t${env_list[$i]}"
                done
                printf "\n"
            else 
                # Print empty warning message
                cprintf "÷red÷No wolf environment ÷÷detected in ÷yellow÷\"$ENV_DIR\"÷÷.\n\n"
            fi
            ;;
        CREATE|REMOVE)
            # Make sure name is valid
            if [[ -z $NAME ]]; then
                _wolf_error "Create/Remove command requires a name to be passed to wolf using the flag \"--name\",\n\te.g. ÷blue÷wolf env create ÷red÷--name <ENV_NAME>÷÷"
            else 
                # We are clear. Let's create the env.
                cprintf "$wolf_env_header"

                # Create folder
                ENV_FOLDER="$ENV_DIR/$NAME"

                case $COMMAND in
                    CREATE)
                        cprintf "\n÷Blue÷÷bold÷ ÷white÷Environment creation                                                                    ÷÷ \n"
                        if [[ -d "$ENV_DIR/$NAME" || -L "$ENV_DIR/$NAME" ]]; then 
                            _wolf_error "\nWolf environment ÷yellow÷\"$NAME\"÷÷ already exists at ÷yellow÷\"$ENV_DIR/$NAME\"÷÷. Skipping operation."
                        else
                            # Make sure env folder exists
                            mkdir -p "$ENV_FOLDER"

                            # Init files
                            # ACTIVATE SCRIPT
                            wolf_act_env_file="$ENV_FOLDER/activate"
                            touch "$wolf_act_env_file"
                            echo "#!/bin/bash" >> "$wolf_act_env_file" 
                            echo "export WOLF_ENV_NAME=\"$NAME\"" >> "$wolf_act_env_file"
                            echo "export WOLF_PS1_BACKUP=\"\$PS1\"" >> "$wolf_act_env_file"
                            echo "export PS1=\"\\[\\033[38;2;173;76;229m|wolf:\$WOLF_ENV_NAME|\[\033[0m \$WOLF_PS1_BACKUP\" " >> "$wolf_act_env_file"
                            echo "" >> "$wolf_act_env_file"
                            echo "# Save env variables backup" >> "$wolf_act_env_file"
                            echo "export WOLF_ENV_DIR=\"$ENV_FOLDER\"" >> "$wolf_act_env_file"
                            echo "set > \"\$WOLF_ENV_DIR/backup.env\"" >> "$wolf_act_env_file"
                            echo "" >> "$wolf_act_env_file"
                            echo "# If env file exists, load it" >> "$wolf_act_env_file"
                            echo "if [[ -f \"\$WOLF_ENV_DIR/vars.env\" ]]; then" >> "$wolf_act_env_file"
                            echo "  eval \$(cat \"\$WOLF_ENV_DIR/vars.env\") " >> "$wolf_act_env_file"
                            echo "fi" >> "$wolf_act_env_file"
                            echo "" >> "$wolf_act_env_file"
                            echo "# If bucket exists, source it" >> "$wolf_act_env_file"
                            echo "if [[ -f \"\$WOLF_ENV_DIR/bucket.p\" || -L \"\$WOLF_ENV_DIR/bucket.p\" ]]; then"  >> "$wolf_act_env_file"
                            echo "  source \"\$WOLF_ENV_DIR/bucket.p\""  >> "$wolf_act_env_file"
                            echo "fi" >> "$wolf_act_env_file"

                            # UPDATE ENV SCRIPT
                            wolf_update_env_file="$ENV_FOLDER/update"
                            touch "$wolf_update_env_file"
                            echo "#!/bin/bash" >> "$wolf_update_env_file" 
                            echo "# Only add vars we modified, load it" >> "$wolf_update_env_file"
                            echo "if [[ -f \"\$WOLF_ENV_DIR/backup.env\" ]]; then" >> "$wolf_update_env_file"
                            echo "  set > \"\$WOLF_ENV_DIR/vars.tmp.env\"" >> "$wolf_update_env_file"
                            echo "  grep -v -F -f\"\$WOLF_ENV_DIR/backup.env\" \"\$WOLF_ENV_DIR/vars.tmp.env\" > \"\$WOLF_ENV_DIR/tmp.env\" " >> "$wolf_update_env_file"
                            echo "  grep -v -F -f\"\$WOLF_ENV_DIR/vars.env\" \"\$WOLF_ENV_DIR/tmp.env\" | grep -v \"BASH_ARGV\\|BASH_LINENO\\|BASH_SOURCE\\|POSITIONAL\\|COMMAND\\|_\" >> \"\$WOLF_ENV_DIR/vars.env\" " >> "$wolf_update_env_file"
                            echo "  rm \"\$WOLF_ENV_DIR/vars.tmp.env\"" >> "$wolf_update_env_file"
                            echo "  rm \"\$WOLF_ENV_DIR/tmp.env\"" >> "$wolf_update_env_file"
                            echo "else" >> "$wolf_update_env_file"
                            echo "  set > \"\$WOLF_ENV_DIR/vars.env\"" >> "$wolf_update_env_file"
                            echo "fi" >> "$wolf_update_env_file"
                            
                            # https://stackoverflow.com/questions/3223904/save-and-restore-shell-variables
                            #set > /tmp/pre
                            #foo=bar
                            #set > /tmp/post
                            #grep -v -F -f/tmp/pre /tmp/post > /tmp/vars

                            # DEACTIVATE ENV SCRIPT
                            wolf_deact_env_file="$ENV_FOLDER/deactivate"
                            touch "$wolf_deact_env_file"
                            echo "#!/bin/bash" >> "$wolf_deact_env_file" 
                            echo "export PS1=\"\$WOLF_PS1_BACKUP\"" >> "$wolf_deact_env_file" 
                            echo "unset WOLF_PS1_BACKUP" >> "$wolf_deact_env_file" 
                            echo "unset WOLF_ENV_NAME" >> "$wolf_deact_env_file" 
                            echo "" >> "$wolf_deact_env_file"
                            echo "# If backup env file exists, load it" >> "$wolf_deact_env_file"
                            echo "if [[ -f \"\$WOLF_ENV_DIR/backup.env\" ]]; then" >> "$wolf_deact_env_file"
                            echo "  set > \"\$WOLF_ENV_DIR/post.env\"" >> "$wolf_deact_env_file"
                            echo "  grep -v -F -f\"\$WOLF_ENV_DIR/backup.env\" \"\$WOLF_ENV_DIR/post.env\" | grep -v \"BASH_ARGV\\|BASH_LINENO\\|BASH_SOURCE\\|POSITIONAL\\|COMMAND\\|_\" > \"\$WOLF_ENV_DIR/tmp.env\" " >> "$wolf_deact_env_file"
                            echo "  eval \$(cat \"\$WOLF_ENV_DIR/tmp.env\") " >> "$wolf_deact_env_file"
                            echo "  # We also need to unset the variables we set in this session/env" >> "$wolf_deact_env_file"
                            echo "  wolf_vars_to_delete=\$(grep -v -F -f\"\$WOLF_ENV_DIR/backup.env\" \"\$WOLF_ENV_DIR/post.env\" | grep -v \"BASH_ARGV\\|BASH_LINENO\\|BASH_SOURCE\" | grep -Po \"^\\w+(?=\\=)\")"  >> "$wolf_deact_env_file"
                            echo "  for v in \"\${wolf_vars_to_delete[@]}\"; do" >> "$wolf_deact_env_file"
                            echo "    unset \$v" >> "$wolf_deact_env_file"
                            echo "  done" >> "$wolf_deact_env_file"
                            echo "  unset wolf_vars_to_delete"  >> "$wolf_deact_env_file"
                            echo "  rm \"\$WOLF_ENV_DIR/tmp.env\"" >> "$wolf_deact_env_file"
                            echo "fi" >> "$wolf_deact_env_file"

                            # Print info
                            _wolf_ok "Wolf environment ÷yellow÷\"$NAME\"÷÷ created at ÷yellow÷\"$ENV_DIR/$NAME\"÷÷."
                        fi
                        ;;
                    
                    REMOVE)
                        if [[ ! -d "$ENV_DIR/$NAME" && ! -L "$ENV_DIR/$NAME" ]]; then 
                            _wolf_error "\nWolf environment ÷yellow÷\"$NAME\"÷÷ does not exists at ÷yellow÷\"$ENV_DIR/$NAME\"÷÷. Skipping operation."
                        else
                            # Ask for confirmation
                            cprintf "\n÷Red÷÷bold÷ ÷white÷Are you sure you want to remove environment ÷yellow÷\"$ENV_DIR/$NAME\"÷white÷ permanently? [y|N]÷÷ "
                            read -p " " -n 1 -r
                            echo ""
                            if [[ $REPLY =~ ^[Yy]$ ]]; then
                                rm -rf "$ENV_DIR/$NAME"
                                _wolf_ok "Wolf environment ÷yellow÷\"$NAME\"÷÷ successfully removed from ÷yellow÷\"$ENV_DIR/$NAME\"÷÷."
                            else 
                                _wolf_info "Wolf environment ÷yellow÷\"$NAME\"÷÷ left untouched."
                            fi
                        fi
                        ;;
                esac
            fi
            ;;
        ACTIVATE)
            if [[ -z $NAME ]]; then
                _wolf_error "No env name provided to activate function. Skipping."
            else
                source "$ENV_DIR/$NAME/activate"
            fi
            ;;
        UPDATE)
            if $UPDATE_BUCKET; then 
                if [ ${#WOLF_BUCKET_LIST[@]} -eq 0 ]; then
                    WOLF_BUCKET_LIST=$(dialog --stdout --title "Please choose a file" --fselect $HOME/ $(expr $LINES - 15) $(expr $COLUMNS - 10))
                fi
                if [[ -f "$WOLF_BUCKET_LIST" || -L "$WOLF_BUCKET_LIST" ]]; then
                    if [[ ! -f "$ENV_DIR/$NAME/bucket.p" && ! -L "$ENV_DIR/$NAME/bucket.p" ]]; then 
                        touch "$ENV_DIR/$NAME/bucket.p"
                        echo "#!/bin/bash" >> "$ENV_DIR/$NAME/bucket.p"
                    fi
                    for f in "${WOLF_BUCKET_LIST[@]}"; do
                        echo "source \"$f\"" >> "$ENV_DIR/$NAME/bucket.p"
                    done
                fi
                _wolf_ok "Bucket source file \"$ENV_DIR/$NAME/bucket.p\" successfully updated"

            elif [[ -z $NAME ]]; then
                _wolf_error "No env name provided to update function. Skipping."
            else
                source "$ENV_DIR/$NAME/update"
            fi
            ;;
        DEACTIVATE)
            if [[ -z $NAME ]]; then
                _wolf_error "No env name provided to deactivate function. Skipping."
            else
                source "$ENV_DIR/$NAME/deactivate"
            fi
            ;;
        RELOAD)
            if [[ -z $NAME ]]; then
                _wolf_error "No env name provided to reload function. Skipping."
            else
                source "$ENV_DIR/$NAME/deactivate"
                source "$ENV_DIR/$NAME/activate"
            fi
            ;;
        *)
            _wolf_error "Invalid command passed to wolf env. Wolf requires at least 1 command to be executed. Valid commands are: \"create\", \"list\""
            ;;
    esac

    # Unset all vars before leaving
    unset env_list
    unset COMMAND
    unset NAME
    unset POSITIONAL
    unset index

}
