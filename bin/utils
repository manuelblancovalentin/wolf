#!/bin/bash

###########################################
# Utility functions def
#
###########################################
# Print source info
_WOLF_HLINE="-----------------------------------------------------------------------------------------------------------------------"

# unicode characters
_WOLF_HOR_DASH="\xe2\x94\x80"
_WOLF_TAB_VERT_NOCROSS="\xe2\x94\x82${_WOLF_HOR_DASH}"
_WOLF_TAB_VERT_CROSSRIGHT="\xe2\x94\x9c${_WOLF_HOR_DASH}"
_WOLF_TAB_VERT_CORNERRIGHT="\xe2\x94\x94${_WOLF_HOR_DASH}"
_WOLF_TAB_CROSS_DOWN="\xe2\x94\xac${_WOLF_HOR_DASH}"
_WOLF_ARC_UPRIGHT="\xe2\x95\xb0${_WOLF_HOR_DASH}"
_WOLF_ARC_DOWNRIGHT="\xe2\x95\xad${_WOLF_HOR_DASH}"
_WOLF_ARROWHEAD_RIGHT="\xe2\x95\xbc"
_WOLF_ARROWHEAD_LEFT="\xe2\x9e\xa4"
_WOLF_QUAD0="\xe2\x96\x9b"
_WOLF_QUAD1="\xe2\x96\x9a"

_WOLF_UNI_HLINE=$(printf '\xe2\x94\x80%.0s' {1..2})


function cprintf() {
    a=$(echo "$*" | sed 's/÷bold÷/\\033[1m/g; s/÷light÷/\\033[2m/g; s/÷underline÷/\\033[4m/g; s/÷blink÷/\\033[5m/g; s/÷invert÷/\\033[7m/g;')
    b=$(echo "$a" | sed 's/÷black÷/\\033[30m/g; s/÷red÷/\\033[31m/g; s/÷green÷/\\033[32m/g; s/÷yellow÷/\\033[33m/g; s/÷blue÷/\\033[34m/g; s/÷purple÷/\\033[35m/g; s/÷cyan÷/\\033[36m/g; s/÷white÷/\\033[37m/g;')
    c=$(echo "$b" | sed 's/÷Black÷/\\033[40m/g; s/÷Red÷/\\033[41m/g; s/÷Green÷/\\033[42m/g; s/÷Yellow÷/\\033[43m/g; s/÷Blue÷/\\033[44m/g; s/÷Purple÷/\\033[45m/g; s/÷Cyan÷/\\033[46m/g; s/÷White÷/\\033[47m/g;')
    d=$(echo "$c" | sed 's/÷÷/\\033[0m/g;')
    printf "$d"
}

_wolf_error () {
	str="$*"
	cprintf "÷bold÷÷red÷ [ERROR]÷÷ ÷white÷- "
	cprintf "$*"
	cprintf "÷÷\n"
}

_wolf_info () {
	str="$*"
	cprintf "÷bold÷÷yellow÷ ${_WOLF_ARROWHEAD_LEFT} [INFO]÷÷ ÷white÷- "
	cprintf "$*"
	cprintf "÷÷\n"
}

_wolf_ok () {
	str="$*"
	cprintf "÷bold÷÷green÷ ${_WOLF_ARROWHEAD_LEFT} [OK]÷÷ ÷white÷- "
	cprintf "$*"
	cprintf "÷÷\n"
}

_wolf_entry () {
	str="$*"
	cprintf "÷bold÷${_WOLF_ARROWHEAD_LEFT}÷white÷ "
	cprintf "$*"
	cprintf "÷÷\n"
}

function printVars () {
    if [ -z "$1" ]; then
        #printf "\r${purple} ${_WOLF_HLINE}-${reset}\n"
        echo 
    else
        title="$1"
        cprintf "\r÷purple÷${_WOLF_ARC_DOWNRIGHT}÷Purple÷ ÷white÷$title ÷÷ \n"
    fi
    i=0
    for key in "${@:2}";
    do  
        cmd="echo \$$key"
        val=$(eval $cmd)
        if [[ $i -eq 0 ]]; then
            if [[ $key != "${@: -1}" ]]; then
                cprintf "÷purple÷${_WOLF_ARC_UPRIGHT}${_WOLF_UNI_HLINE}${_WOLF_TAB_CROSS_DOWN}${_WOLF_ARROWHEAD_RIGHT} ÷blue÷$key÷white÷: $val\n"
            else 
                cprintf "÷purple÷${_WOLF_ARC_UPRIGHT}${_WOLF_UNI_HLINE}${_WOLF_HOR_DASH}${_WOLF_ARROWHEAD_RIGHT} ÷blue÷$key÷white÷: $val\n\n"
            fi
        elif [[ $key != "${@: -1}" ]]; then
            cprintf "÷purple÷    ${_WOLF_TAB_VERT_CROSSRIGHT}${_WOLF_ARROWHEAD_RIGHT} ÷blue÷$key÷white÷: $val\n"
        else
            cprintf "÷purple÷    ${_WOLF_TAB_VERT_CORNERRIGHT}${_WOLF_ARROWHEAD_RIGHT} ÷blue÷$key÷white÷: $val\n\n"
        fi
        let i++
    done
}


#######################################
# Find next index of a folder/file to be created
######################################
function get_next_indexed_file() {
    cmd="$1"
    file="$2"
    max_index=`eval "$cmd"`
    if [[ -z $max_index ]]; then
        if [[ -f "${file}${max_index}" || -L "${file}${max_index}" ]]; then
            exists=true
        else
            exists=false
        fi
    else
        if [[ -d "${file}.${max_index}" || -L "${file}.${max_index}" ]]; then
            exists=true
        else
            exists=false
        fi
    fi
    if $exists; then
        if [[ -z $max_index ]]; then
            max_index=0
        fi
        let max_index++
        printf "${file}.${max_index}"
    else
        if [[ -z $max_index ]]; then
            printf "${file}"
        else
            printf "${file}.${max_index}"
        fi
    fi
}

function get_next_indexed_dir() {
    cmd="$1"
    dir="$2"
    max_index=`eval "$cmd"`
    if [[ -z $max_index ]]; then
        if [[ -d "${dir}${max_index}" || -L "${dir}${max_index}" ]]; then
            exists=true
        else
            exists=false
        fi
    else
        if [[ -d "${dir}.${max_index}" || -L "${dir}.${max_index}" ]]; then
            exists=true
        else
            exists=false
        fi
    fi
    if $exists; then
        if [[ -z $max_index ]]; then
            max_index=0
        fi
        let max_index++
        printf "${dir}.${max_index}"
    else
        if [[ -z $max_index ]]; then
            printf "${dir}"
        else
            printf "${dir}.${max_index}"
        fi
    fi

}

function get_max_indexed_dir() {
    cmd="$1"
    dir="$2"
    max_index=`eval "$cmd"`
    if [[ -z $max_index ]]; then
        if [[ -d "${dir}${max_index}" || -L "${dir}${max_index}" ]]; then
            exists=true
        else
            exists=false
        fi
    else
        if [[ -d "${dir}.${max_index}" || -L "${dir}.${max_index}" ]]; then
            exists=true
        else
            exists=false
        fi
    fi
    if $exists; then
        if [[ -z $max_index ]]; then
            max_index=0
            printf "${dir}"
        else
            printf "${dir}.${max_index}"
        fi
        #let max_index++
        
    fi

}

#####################################
# FUNCTION USED TO TRANSFORM A SET OF WHITE-SPACE SEPARATED STRINGS INTO AN ARRAY
####################################
function vectorize {
    VAR=($(echo "$@" | xargs))
    VAR_CAT=""
    num="${#VAR[@]}"
    for ((i=0; i<num; i++)); do

        if [[ $num -gt 1 ]]; then
            if [[ $i -eq 0 ]]; then
                VAR_CAT="'["
            fi
            VAR_CAT="$VAR_CAT $(echo ${VAR[$i]} | xargs)"
            if [[ $i -eq $((num-1)) ]]; then
                VAR_CAT="$VAR_CAT]'"
            fi
        else
            VAR_CAT="$(echo ${VAR[$i]} | xargs)"
        fi
    done
    echo "$VAR_CAT"
}
